{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    selectedScale\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fret\",\n    id: \"determined by props\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"fret-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, convertIndexToString(note, sharps)));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);\n\nclass samplefretxd extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.assignID = (note, highlight, scale, showUnused) => {\n      if (scale[0] === note && highlight) {\n        return \"highlighted\";\n      } else if (scale.includes(note)) {\n        return \"scale-note\";\n      } else if (showUnused) {\n        return \"unused-note\";\n      } else return \"blank-fret\";\n    };\n\n    this.getDegree = (note, scale) => {\n      if (scale.includes(note)) {\n        for (let i = 0; i < scale.length; i++) {\n          if (scale[i] === note) {\n            let degree = i + 1;\n            return degree.toString();\n          }\n        }\n      }\n    };\n\n    this.renderLabel = label => {\n      if (label !== null) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fretLabel\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 14\n          }\n        }, label.toString());\n      }\n    };\n  }\n\n  render() {\n    const {\n      note,\n      showUnusedNotes,\n      highlightRoots,\n      degrees,\n      sharps,\n      selectedScale\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fret\",\n      id: this.assignID(note, highlightRoots, selectedScale, showUnusedNotes),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, convertIndexToString(note, sharps), /*#__PURE__*/React.createElement(\"span\", {\n      className: degrees ? \"degree\" : \"hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, this.getDegree(note, selectedScale)), this.renderLabel(this.props.label));\n  }\n\n}","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js"],"names":["React","connect","convertIndexToString","Fret","props","note","showUnusedNotes","highlightRoots","degrees","sharps","selectedScale","mapStateToProps","state","indianDegreeNotation","samplefretxd","Component","assignID","highlight","scale","showUnused","includes","getDegree","i","length","degree","toString","renderLabel","label","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    selectedScale,\n  } = props;\n\n  return (\n    <div className=\"fret\" id=\"determined by props\">\n      <p className=\"fret-text\">{convertIndexToString(note, sharps)}</p>\n      {/* swaras, degrees */}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps,\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);\n\nclass samplefretxd extends React.Component {\n  assignID = (note, highlight, scale, showUnused) => {\n    if (scale[0] === note && highlight) {\n      return \"highlighted\";\n    } else if (scale.includes(note)) {\n      return \"scale-note\";\n    } else if (showUnused) {\n      return \"unused-note\";\n    } else return \"blank-fret\";\n  };\n\n  getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          let degree = i + 1;\n          return degree.toString();\n        }\n      }\n    }\n  };\n\n  renderLabel = (label) => {\n    if (label !== null) {\n      return <span className=\"fretLabel\">{label.toString()}</span>;\n    }\n  };\n\n  render() {\n    const {\n      note,\n      showUnusedNotes,\n      highlightRoots,\n      degrees,\n      sharps,\n      selectedScale,\n    } = this.props;\n    return (\n      <div\n        className=\"fret\"\n        id={this.assignID(note, highlightRoots, selectedScale, showUnusedNotes)}\n      >\n        {convertIndexToString(note, sharps)}\n        <span className={degrees ? \"degree\" : \"hidden\"}>\n          {this.getDegree(note, selectedScale)}\n        </span>\n        {this.renderLabel(this.props.label)}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}