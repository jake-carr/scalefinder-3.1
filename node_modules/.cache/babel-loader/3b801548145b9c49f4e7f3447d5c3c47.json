{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js\";\n// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Dropdown(props) {\n  // react.useState for open/close, close when click outside like material ui modals\n  // depending on props.type or props.role (\"note-selector\", or \"scale-selector\" etc), get Options\n  // state/store/props need to be handled onChange for selected value (note index, scale index, num of strings etc)\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false); // handleChange or equiavelent handling of props. pass 'role' etc. code roles 1 @ a time\n  };\n\n  const handleChange = () => {// xd\n    // series of if\n    // possibly unecesary\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"open the dropdown / display current selection\"), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    open: open,\n    onClose: handleClose,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, \"the options will render here\")) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex // map to all, but only change (call dispatch) based on type?\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: value => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js"],"names":["React","connect","Dropdown","props","open","setOpen","useState","handleOpen","handleClose","handleChange","mapStateToProps","state","selectedNoteIndex","mapDispatchToProps","dispatch","setNoteIndex","value","type","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AACA;AACA;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvBF,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAAC,KAAD,CAAP,CADwB,CAExB;AACD,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAM,CACzB;AACA;AACA;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEF,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,EAIGH,IAAI,gBACH;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,OAAO,EAAEI,WAHX;AAIE,IAAA,OAAO,EAAEA,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCANF,CADG,GASD,IAbN,CADF;AAiBD;;AAED,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,iBAAiB,EAAED,KAAK,CAACC,iBADpB,CAEL;;AAFK,GAAP;AAID;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,YAAY,EAAGC,KAAD,IACZF,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAEF;AAAnC,KAAD;AAFL,GAAP;AAID;;AAED,eAAef,OAAO,CAACS,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CX,QAA7C,CAAf","sourcesContent":["// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Dropdown(props) {\n  // react.useState for open/close, close when click outside like material ui modals\n  // depending on props.type or props.role (\"note-selector\", or \"scale-selector\" etc), get Options\n  // state/store/props need to be handled onChange for selected value (note index, scale index, num of strings etc)\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // handleChange or equiavelent handling of props. pass 'role' etc. code roles 1 @ a time\n  };\n\n  const handleChange = () => {\n    // xd\n    // series of if\n    // possibly unecesary\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <button onClick={handleOpen}>\n        open the dropdown / display current selection\n      </button>\n      {open ? (\n        <div\n          className=\"modal\"\n          open={open}\n          onClose={handleClose}\n          onClick={handleClose}\n        >\n          <p>the options will render here</p>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex,\n    // map to all, but only change (call dispatch) based on type?\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: (value) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);\n"]},"metadata":{},"sourceType":"module"}