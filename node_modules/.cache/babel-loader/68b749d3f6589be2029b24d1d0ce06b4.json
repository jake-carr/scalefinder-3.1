{"ast":null,"code":"import * as actions from \"./actionTypes\";\nimport { saveLocally } from \"../constants/utils\";\nexport const reducer = (state, action) => {\n  if (action.type === actions.SET_FRET_COUNT) {\n    saveLocally(\"numberOfFrets\", action.payload);\n    return { ...state,\n      numberOfFrets: action.payload\n    };\n  }\n\n  if (action.type === actions.SET_STRING_COUNT) {\n    saveLocally(\"numberOfStrings\", action.payload);\n    return { ...state,\n      numberOfStrings: action.payload\n    };\n  }\n\n  if (action.type === actions.SET_NOTE_INDEX) {\n    saveLocally(\"noteIndex\", action.payload);\n    return { ...state,\n      selectedNoteIndex: action.payload\n    };\n  }\n\n  if (action.type === actions.SET_SCALE_INDEX) {\n    saveLocally(\"scaleIndex\", action.payload);\n    return { ...state,\n      selectedScaleIndex: action.payload\n    };\n  }\n\n  if (action.type === actions.SET_TUNING_INDEX) {\n    return { ...state,\n      selectedTuningIndex: action.payload,\n      changeTuningRequest: state.changeTuningRequest + 1\n    };\n  }\n\n  if (action.type === actions.TOGGLE) {\n    return { ...state,\n      [action.payload]: !state[action.payload]\n    };\n  }\n\n  if (action.type === actions.TOGGLE_ON) {\n    return { ...state,\n      [action.payload]: true\n    };\n  }\n\n  if (action.type === actions.TOGGLE_OFF) {\n    return { ...state,\n      [action.payload]: false\n    };\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/Users/jake/Desktop/personal_projects/scalefinder-v3/src/redux/reducer.js"],"names":["actions","saveLocally","reducer","state","action","type","SET_FRET_COUNT","payload","numberOfFrets","SET_STRING_COUNT","numberOfStrings","SET_NOTE_INDEX","selectedNoteIndex","SET_SCALE_INDEX","selectedScaleIndex","SET_TUNING_INDEX","selectedTuningIndex","changeTuningRequest","TOGGLE","TOGGLE_ON","TOGGLE_OFF"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;AACA,SAAQC,WAAR,QAA0B,oBAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,MAAIA,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACM,cAA5B,EAA4C;AAC1CL,IAAAA,WAAW,CAAC,eAAD,EAAkBG,MAAM,CAACG,OAAzB,CAAX;AACA,WAAO,EACL,GAAGJ,KADE;AAELK,MAAAA,aAAa,EAAEJ,MAAM,CAACG;AAFjB,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACS,gBAA5B,EAA8C;AAC5CR,IAAAA,WAAW,CAAC,iBAAD,EAAoBG,MAAM,CAACG,OAA3B,CAAX;AACA,WAAO,EACL,GAAGJ,KADE;AAELO,MAAAA,eAAe,EAAEN,MAAM,CAACG;AAFnB,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACW,cAA5B,EAA4C;AAC1CV,IAAAA,WAAW,CAAC,WAAD,EAAcG,MAAM,CAACG,OAArB,CAAX;AACA,WAAO,EACL,GAAGJ,KADE;AAELS,MAAAA,iBAAiB,EAAER,MAAM,CAACG;AAFrB,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACa,eAA5B,EAA6C;AAC3CZ,IAAAA,WAAW,CAAC,YAAD,EAAeG,MAAM,CAACG,OAAtB,CAAX;AACA,WAAO,EACL,GAAGJ,KADE;AAELW,MAAAA,kBAAkB,EAAEV,MAAM,CAACG;AAFtB,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACe,gBAA5B,EAA8C;AAC5C,WAAO,EACL,GAAGZ,KADE;AAELa,MAAAA,mBAAmB,EAAEZ,MAAM,CAACG,OAFvB;AAGLU,MAAAA,mBAAmB,EAAEd,KAAK,CAACc,mBAAN,GAA4B;AAH5C,KAAP;AAKD;;AACD,MAAIb,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACkB,MAA5B,EAAoC;AAClC,WAAO,EACL,GAAGf,KADE;AAEL,OAACC,MAAM,CAACG,OAAR,GAAkB,CAACJ,KAAK,CAACC,MAAM,CAACG,OAAR;AAFnB,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACmB,SAA5B,EAAuC;AACrC,WAAO,EACL,GAAGhB,KADE;AAEL,OAACC,MAAM,CAACG,OAAR,GAAkB;AAFb,KAAP;AAID;;AACD,MAAIH,MAAM,CAACC,IAAP,KAAgBL,OAAO,CAACoB,UAA5B,EAAwC;AACtC,WAAO,EACL,GAAGjB,KADE;AAEL,OAACC,MAAM,CAACG,OAAR,GAAkB;AAFb,KAAP;AAID;;AAED,SAAOJ,KAAP;AACD,CAxDM","sourcesContent":["import * as actions from \"./actionTypes\";\nimport {saveLocally} from \"../constants/utils\"\n\nexport const reducer = (state, action) => {\n  if (action.type === actions.SET_FRET_COUNT) {\n    saveLocally(\"numberOfFrets\", action.payload)\n    return {\n      ...state,\n      numberOfFrets: action.payload,\n    };\n  }\n  if (action.type === actions.SET_STRING_COUNT) {\n    saveLocally(\"numberOfStrings\", action.payload)\n    return {\n      ...state,\n      numberOfStrings: action.payload,\n    };\n  }\n  if (action.type === actions.SET_NOTE_INDEX) {\n    saveLocally(\"noteIndex\", action.payload)\n    return {\n      ...state,\n      selectedNoteIndex: action.payload,\n    };\n  }\n  if (action.type === actions.SET_SCALE_INDEX) {\n    saveLocally(\"scaleIndex\", action.payload)\n    return {\n      ...state,\n      selectedScaleIndex: action.payload,\n    };\n  }\n  if (action.type === actions.SET_TUNING_INDEX) {\n    return {\n      ...state,\n      selectedTuningIndex: action.payload,\n      changeTuningRequest: state.changeTuningRequest + 1,\n    };\n  }\n  if (action.type === actions.TOGGLE) {\n    return {\n      ...state,\n      [action.payload]: !state[action.payload],\n    };\n  }\n  if (action.type === actions.TOGGLE_ON) {\n    return {\n      ...state,\n      [action.payload]: true,\n    };\n  }\n  if (action.type === actions.TOGGLE_OFF) {\n    return {\n      ...state,\n      [action.payload]: false,\n    };\n  }\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}