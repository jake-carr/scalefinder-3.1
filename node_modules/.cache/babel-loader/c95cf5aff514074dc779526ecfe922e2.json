{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleTray from \"./components/ScaleTray\";\nimport InfoPopup from \"./components/InfoPopup\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale } from \"./constants/utils\";\nconst iSymbol = /*#__PURE__*/React.createElement(\"span\", {\n  type: \"text\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 17\n  }\n}, \" \\u2139\");\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    sargamNotation,\n    sharps,\n    degrees,\n    infoModalOpen,\n    showUnusedNotes,\n    setNoteIndex,\n    setScaleIndex,\n    toggle\n  } = props;\n\n  const toggleSharps = () => {\n    toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    toggle(\"sargamNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [{\n    toggle: toggleSharps,\n    btnText: sharps ? \"♭\" : \"♯\",\n    round: true\n  }, {\n    toggle: toggleHighlightRoots,\n    btnText: \"Highlight roots\",\n    round: false\n  }, {\n    toggle: toggleShowUnusedNotes,\n    btnText: showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n    round: false\n  }, {\n    toggle: toggleShowDegrees,\n    btnText: degrees ? \"Hide degrees\" : \"Show degrees\",\n    round: false\n  }, {\n    toggle: toggleInfoModal,\n    btnText: iSymbol,\n    round: true\n  }];\n\n  const randomize = () => {\n    setNoteIndex(Math.floor(Math.random() * 12));\n    setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"note-button\",\n        id: idx === selectedNoteIndex ? \"selected\" : \"unselected\",\n        onClick: () => {\n          setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: btn.round ? \"round-button-gray\" : \"rectangular-button-gray\",\n        id: btn.btnText === \"Highlight roots\" && highlightRoots ? \"selected-green\" : !btn.round && btn.btnText.includes(\"degrees\") && degrees ? \"selected-blue\" : null,\n        onClick: btn.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, btn.btnText);\n    });\n  };\n\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const alteration = getAlteration(sharps);\n  useEffect(() => {\n    randomize(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-selector-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"randomize-button\",\n    onClick: randomize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"game-die\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"\\uD83C\\uDFB2\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, renderNoteButtons(alteration)), /*#__PURE__*/React.createElement(ScaleTray, {\n    options: scales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, infoModalOpen ? /*#__PURE__*/React.createElement(InfoPopup, {\n    closePopup: toggleInfoModal.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }) : null, renderToggleButtons(), degrees ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"degree-notation-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: !sargamNotation ? \"on\" : \"sargams-on\",\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"numbered degrees\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: sargamNotation ? \"on\" : \"sargams-on\",\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"indian sargams\")) : null), /*#__PURE__*/React.createElement(Fretboard, {\n    currentScale: currentScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    sargamNotation: state.sargamNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    numberOfFrets: state.numberOfFrets,\n    numberOfStrings: state.numberOfStrings,\n    userPreferences: state.userPreferences\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","useEffect","connect","Fretboard","ScaleTray","InfoPopup","scales","getAlteration","createScale","iSymbol","App","props","selectedNoteIndex","selectedScaleIndex","highlightRoots","sargamNotation","sharps","degrees","infoModalOpen","showUnusedNotes","setNoteIndex","setScaleIndex","toggle","toggleSharps","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","randomize","Math","floor","random","length","renderNoteButtons","notation","map","note","idx","renderToggleButtons","btn","includes","currentScale","pattern","alteration","bind","mapStateToProps","state","numberOfFrets","numberOfStrings","userPreferences","mapDispatchToProps","dispatch","name","type","payload","index"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleTray from \"./components/ScaleTray\";\nimport InfoPopup from \"./components/InfoPopup\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale } from \"./constants/utils\";\n\nconst iSymbol = <span type=\"text\"> &#8505;</span>;\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    sargamNotation,\n    sharps,\n    degrees,\n    infoModalOpen,\n    showUnusedNotes,\n    setNoteIndex,\n    setScaleIndex,\n    toggle,\n  } = props;\n\n  const toggleSharps = () => {\n    toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    toggle(\"sargamNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [\n    {\n      toggle: toggleSharps,\n      btnText: sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    {\n      toggle: toggleShowUnusedNotes,\n      btnText: showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n      round: false,\n    },\n    {\n      toggle: toggleShowDegrees,\n      btnText: degrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    {\n      toggle: toggleInfoModal,\n      btnText: iSymbol,\n      round: true,\n    },\n  ];\n\n  const randomize = () => {\n    setNoteIndex(Math.floor(Math.random() * 12));\n    setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"note-button\"\n          id={idx === selectedNoteIndex ? \"selected\" : \"unselected\"}\n          onClick={() => {\n            setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return (\n        <button\n          key={idx}\n          className={\n            btn.round ? \"round-button-gray\" : \"rectangular-button-gray\"\n          }\n          id={\n            btn.btnText === \"Highlight roots\" && highlightRoots\n              ? \"selected-green\"\n              : !btn.round && btn.btnText.includes(\"degrees\") && degrees\n              ? \"selected-blue\"\n              : null\n          }\n          onClick={btn.toggle}\n        >\n          {btn.btnText}\n        </button>\n      );\n    });\n  };\n\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n\n  const alteration = getAlteration(sharps);\n\n  useEffect(() => {\n    randomize();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-selector-container\">\n        <button id=\"randomize-button\" onClick={randomize}>\n          <span role=\"img\" aria-label=\"game-die\">\n            🎲\n          </span>\n        </button>\n        <div className=\"note-button-container\">\n          {renderNoteButtons(alteration)}\n        </div>\n        <ScaleTray options={scales} />\n      </div>\n      <div className=\"toggle-button-container\">\n        {infoModalOpen ? (\n          <InfoPopup closePopup={toggleInfoModal.bind(this)} />\n        ) : null}\n        {renderToggleButtons()}\n        {degrees ? (\n          <div className=\"degree-notation-options\">\n            <button\n              className={!sargamNotation ? \"on\" : \"sargams-on\"}\n              onClick={toggleIndianNotation}\n            >\n              numbered degrees\n            </button>\n            <button\n              className={sargamNotation ? \"on\" : \"sargams-on\"}\n              onClick={toggleIndianNotation}\n            >\n              indian sargams\n            </button>\n          </div>\n        ) : null}\n      </div>\n      <Fretboard currentScale={currentScale}></Fretboard>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    sargamNotation: state.sargamNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    numberOfFrets: state.numberOfFrets,\n    numberOfStrings: state.numberOfStrings,\n    userPreferences: state.userPreferences,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}