{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport { convertIndexToString, getNotation, createScale } from \"./constants/utils\";\n\nfunction App(props) {\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = {\n    sharps: {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true\n    },\n    highlightRoots: {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false\n    },\n    showUnusedNotes: {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false\n    },\n    showDegrees: {\n      toggle: toggleShowDegrees,\n      btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false\n    },\n    infoModal: {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true\n    }\n  };\n\n  randomize = () => {\n    this.props.setNoteIndex(Math.floor(Math.random() * 12));\n    this.props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"round-button-purple\",\n        id: idx === this.props.selectedNoteIndex ? \"selected\" : null,\n        onClick: () => {\n          this.props.setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  renderToggleButtons = () => {\n    console.log(toggleOptions); // return xyz.map((note, idx) => {\n    //   return (\n    //     <button\n    //       key={[note, idx]}\n    //       className=\"round-button-purple\"\n    //       id={idx === this.props.selectedNoteIndex ? \"selected\" : null}\n    //       onClick={() => {\n    //         this.props.setNoteIndex(idx);\n    //       }}\n    //     >\n    //       {note}\n    //     </button>\n    //   );\n    // });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const notation = getNotation(sharps);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleSharps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, props.sharps ? \"♭\" : \"♯\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleHighlightRoots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, props.highlightRoots ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleShowUnusedNotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, props.showUnusedNotes ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleShowDegrees,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, props.showDegrees ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, props.indianDegreeNotation ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleInfoModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, props.infoModalOpen ? \"true\" : \"false\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, renderNoteButtons(notation)), /*#__PURE__*/React.createElement(Fretboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","connect","Fretboard","scales","convertIndexToString","getNotation","createScale","App","props","toggleSharps","toggle","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","sharps","btnText","round","highlightRoots","showUnusedNotes","showDegrees","infoModal","randomize","setNoteIndex","Math","floor","random","setScaleIndex","length","renderNoteButtons","notation","map","note","idx","selectedNoteIndex","renderToggleButtons","console","log","rootDisplay","scaleDisplay","selectedScaleIndex","name","currentScale","pattern","indianDegreeNotation","infoModalOpen","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport {\n  convertIndexToString,\n  getNotation,\n  createScale,\n} from \"./constants/utils\";\n\nfunction App(props) {\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = {\n    sharps: {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    highlightRoots: {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    showUnusedNotes: {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false,\n    },\n    showDegrees: {\n      toggle: toggleShowDegrees,\n      btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    infoModal: {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true,\n    },\n  };\n\n  randomize = () => {\n    this.props.setNoteIndex(Math.floor(Math.random() * 12));\n    this.props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"round-button-purple\"\n          id={idx === this.props.selectedNoteIndex ? \"selected\" : null}\n          onClick={() => {\n            this.props.setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  renderToggleButtons = () => {\n    console.log(toggleOptions);\n    // return xyz.map((note, idx) => {\n    //   return (\n    //     <button\n    //       key={[note, idx]}\n    //       className=\"round-button-purple\"\n    //       id={idx === this.props.selectedNoteIndex ? \"selected\" : null}\n    //       onClick={() => {\n    //         this.props.setNoteIndex(idx);\n    //       }}\n    //     >\n    //       {note}\n    //     </button>\n    //   );\n    // });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n  const notation = getNotation(sharps);\n\n  return (\n    <div className=\"App\">\n      <div className=\"toggle-button-container\">\n        <button onClick={toggleSharps}>{props.sharps ? \"♭\" : \"♯\"}</button>\n        <button onClick={toggleHighlightRoots}>\n          {props.highlightRoots ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleShowUnusedNotes}>\n          {props.showUnusedNotes ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleShowDegrees}>\n          {props.showDegrees ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleIndianNotation}>\n          {props.indianDegreeNotation ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleInfoModal}>\n          {props.infoModalOpen ? \"true\" : \"false\"}\n        </button>\n      </div>\n      <div className=\"note-button-container\">{renderNoteButtons(notation)}</div>\n      {/* scale selectors */}\n      <Fretboard></Fretboard>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}