{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport { convertIndexToString, getNotation, createScale } from \"./constants/utils\";\n\nfunction App(props) {\n  const {\n    sharps,\n    highlightRoots,\n    showUnusedNotes,\n    showDegrees,\n    indianDegreeNotation,\n    infoModalOpen,\n    selectedNoteIndex,\n    selectedScaleIndex\n  } = props;\n\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [{\n    toggle: toggleSharps,\n    btnText: props.sharps ? \"♭\" : \"♯\",\n    round: true\n  }, {\n    toggle: toggleHighlightRoots,\n    btnText: \"Highlight roots\",\n    round: false\n  }, {\n    toggle: toggleShowUnusedNotes,\n    btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n    round: false\n  }, {\n    toggle: toggleShowDegrees,\n    btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n    round: false\n  }, {\n    toggle: toggleInfoModal,\n    btnText: \"info\",\n    round: true\n  }];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"round-button-purple\",\n        id: idx === selectedNoteIndex ? \"selected\" : null,\n        onClick: () => {\n          props.setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  }; // i\n  // toggle: toggleShowDegrees,\n  // btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n  // round: false,\n\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: btn.round ? \"round-button-gray\" : \"rectangular-button-gray\",\n        onClick: btn.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, btn.btnText);\n    });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const notation = getNotation(sharps);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, renderToggleButtons()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, renderNoteButtons(notation)), /*#__PURE__*/React.createElement(Fretboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","connect","Fretboard","scales","convertIndexToString","getNotation","createScale","App","props","sharps","highlightRoots","showUnusedNotes","showDegrees","indianDegreeNotation","infoModalOpen","selectedNoteIndex","selectedScaleIndex","toggleSharps","toggle","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","randomize","setNoteIndex","Math","floor","random","setScaleIndex","length","renderNoteButtons","notation","map","note","idx","renderToggleButtons","btn","rootDisplay","scaleDisplay","name","currentScale","pattern","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport {\n  convertIndexToString,\n  getNotation,\n  createScale,\n} from \"./constants/utils\";\n\nfunction App(props) {\n  const {\n    sharps,\n    highlightRoots,\n    showUnusedNotes,\n    showDegrees,\n    indianDegreeNotation,\n    infoModalOpen,\n    selectedNoteIndex,\n    selectedScaleIndex,\n  } = props;\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [\n    {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false,\n    },\n    {\n      toggle: toggleShowDegrees,\n      btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true,\n    },\n  ];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"round-button-purple\"\n          id={idx === selectedNoteIndex ? \"selected\" : null}\n          onClick={() => {\n            props.setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  // i\n  // toggle: toggleShowDegrees,\n  // btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n  // round: false,\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return (\n        <button\n          key={idx}\n          className={\n            btn.round ? \"round-button-gray\" : \"rectangular-button-gray\"\n          }\n          onClick={btn.toggle}\n        >\n          {btn.btnText}\n        </button>\n      );\n    });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n  const notation = getNotation(sharps);\n\n  return (\n    <div className=\"App\">\n      <div className=\"toggle-button-container\">{renderToggleButtons()}</div>\n      <div className=\"note-button-container\">{renderNoteButtons(notation)}</div>\n      {/* scale selectors */}\n      <Fretboard></Fretboard>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}