{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/String.js\";\n// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { parse } from \"../constants/utils\";\n\nfunction String(props) {\n  const {\n    numberOfFrets,\n    rootIndex,\n    scale\n  } = props; // react.useState for a tuning value (default props.root), then buttons to go up and down 1 step at a down. import * parser func\n\n  const tuneUp = () => {};\n\n  const tuneDown = () => {};\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(rootIndex + fretNumber); // instead of rootIndex, parse will take state.root or whatever its called once tuning is in\n\n      let label;\n\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: [value, idx],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Fret, {\n        note: fretNote,\n        scale: scale,\n        label: this.props.stringIndex === 5 && fretLabels.includes(fretNumber) ? label : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }\n      }));\n    });\n  }; // componentDidUpdate for changeTuningRequest eventually\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guitar-string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  }, renderFrets());\n}\n\nexport default String;","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/String.js"],"names":["React","Fret","parse","String","props","numberOfFrets","rootIndex","scale","tuneUp","tuneDown","renderFrets","frets","Array","keys","fretLabels","map","value","idx","fretNumber","fretNote","label","includes","stringIndex"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA;AAA5B,MAAsCH,KAA5C,CADqB,CAErB;;AAEA,QAAMI,MAAM,GAAG,MAAM,CAAE,CAAvB;;AAEA,QAAMC,QAAQ,GAAG,MAAM,CAAE,CAAzB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMC,KAAK,GAAG,CAAC,GAAGC,KAAK,CAACP,aAAD,CAAL,CAAqBQ,IAArB,EAAJ,CAAd;AACA,UAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,CAAnB;AACA,WAAOH,KAAK,CAACI,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC/B,YAAMC,UAAU,GAAGD,GAAG,GAAG,CAAzB;AACA,YAAME,QAAQ,GAAGjB,KAAK,CAACI,SAAS,GAAGY,UAAb,CAAtB,CAF+B,CAG/B;;AACA,UAAIE,KAAJ;;AACA,UAAIN,UAAU,CAACO,QAAX,CAAoBH,UAApB,CAAJ,EAAqC;AACnCE,QAAAA,KAAK,GAAGF,UAAR;AACD;;AACD,0BACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,EAAE,CAACF,KAAD,EAAQC,GAAR,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAEE,QADR;AAEE,QAAA,KAAK,EAAEZ,KAFT;AAGE,QAAA,KAAK,EACH,KAAKH,KAAL,CAAWkB,WAAX,KAA2B,CAA3B,IAAgCR,UAAU,CAACO,QAAX,CAAoBH,UAApB,CAAhC,GACIE,KADJ,GAEI,IANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAaD,KArBM,CAAP;AAsBD,GAzBD,CARqB,CAmCrB;;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCV,WAAW,EAA3C,CAAP;AACD;;AAED,eAAeP,MAAf","sourcesContent":["// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\n\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { parse } from \"../constants/utils\";\n\nfunction String(props) {\n  const { numberOfFrets, rootIndex, scale } = props;\n  // react.useState for a tuning value (default props.root), then buttons to go up and down 1 step at a down. import * parser func\n\n  const tuneUp = () => {};\n\n  const tuneDown = () => {};\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(rootIndex + fretNumber);\n      // instead of rootIndex, parse will take state.root or whatever its called once tuning is in\n      let label;\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n      return (\n        <React.Fragment key={[value, idx]}>\n          <Fret\n            note={fretNote}\n            scale={scale}\n            label={\n              this.props.stringIndex === 5 && fretLabels.includes(fretNumber)\n                ? label\n                : null\n            }\n          ></Fret>\n        </React.Fragment>\n      );\n    });\n  };\n\n  // componentDidUpdate for changeTuningRequest eventually\n\n  return <div className=\"guitar-string\">{renderFrets()}</div>;\n}\n\nexport default String;\n"]},"metadata":{},"sourceType":"module"}