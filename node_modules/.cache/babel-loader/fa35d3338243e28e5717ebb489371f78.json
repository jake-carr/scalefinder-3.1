{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleDropdown from \"./components/ScaleDropdown\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale } from \"./constants/utils\";\nconst iSymbol = /*#__PURE__*/React.createElement(\"span\", {\n  type: \"text\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 17\n  }\n}, \" \\u2139\");\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    swaraNotation,\n    sharps,\n    degrees\n  } = props;\n\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"swaraNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [{\n    toggle: toggleSharps,\n    btnText: props.sharps ? \"♭\" : \"♯\",\n    round: true\n  }, {\n    toggle: toggleHighlightRoots,\n    btnText: \"Highlight roots\",\n    round: false\n  }, {\n    toggle: toggleShowUnusedNotes,\n    btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n    round: false\n  }, {\n    toggle: toggleShowDegrees,\n    btnText: props.degrees ? \"Hide degrees\" : \"Show degrees\",\n    round: false\n  }, {\n    toggle: toggleInfoModal,\n    btnText: iSymbol,\n    round: true\n  }];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"note-button\",\n        id: idx === selectedNoteIndex ? \"selected\" : \"unselected\",\n        onClick: () => {\n          props.setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: btn.round ? \"round-button-gray\" : \"rectangular-button-gray\",\n        id: btn.btnText === \"Highlight roots\" && highlightRoots ? \"selected-green\" : !btn.round && btn.btnText.includes(\"degrees\") && degrees ? \"selected-blue\" : null,\n        onClick: btn.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, btn.btnText);\n    });\n  };\n\n  const renderDegreeOptions = degrees => {\n    // checkbox like keep open\n    return degrees ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"degree-notation-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, \"number degrees\"), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"swara-switch\",\n      className: swaraNotation ? \"degrees-on\" : \"swaras-on\",\n      onClick: toggleIndianNotation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \"indian swaras\")) : null;\n  }; // const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  // const scaleDisplay = scales[selectedScaleIndex].name;\n\n\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const alteration = getAlteration(sharps);\n  useEffect(() => {\n    randomize(); // eslint-disable-next-line\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-selector-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"randomize-button\",\n    onClick: randomize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"game-die\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, \"\\uD83C\\uDFB2\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, renderNoteButtons(alteration)), /*#__PURE__*/React.createElement(ScaleDropdown, {\n    options: scales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, renderToggleButtons(), renderDegreeOptions(degrees)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fretboard, {\n    currentScale: currentScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","useEffect","connect","Fretboard","ScaleDropdown","scales","getAlteration","createScale","iSymbol","App","props","selectedNoteIndex","selectedScaleIndex","highlightRoots","swaraNotation","sharps","degrees","toggleSharps","toggle","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","showUnusedNotes","randomize","setNoteIndex","Math","floor","random","setScaleIndex","length","renderNoteButtons","notation","map","note","idx","renderToggleButtons","btn","includes","renderDegreeOptions","currentScale","pattern","alteration","mapStateToProps","state","infoModalOpen","mapDispatchToProps","dispatch","name","type","payload","index"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleDropdown from \"./components/ScaleDropdown\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale } from \"./constants/utils\";\n\nconst iSymbol = <span type=\"text\"> &#8505;</span>;\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    swaraNotation,\n    sharps,\n    degrees,\n  } = props;\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"swaraNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [\n    {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n      round: false,\n    },\n    {\n      toggle: toggleShowDegrees,\n      btnText: props.degrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    {\n      toggle: toggleInfoModal,\n      btnText: iSymbol,\n      round: true,\n    },\n  ];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"note-button\"\n          id={idx === selectedNoteIndex ? \"selected\" : \"unselected\"}\n          onClick={() => {\n            props.setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return (\n        <button\n          key={idx}\n          className={\n            btn.round ? \"round-button-gray\" : \"rectangular-button-gray\"\n          }\n          id={\n            btn.btnText === \"Highlight roots\" && highlightRoots\n              ? \"selected-green\"\n              : !btn.round && btn.btnText.includes(\"degrees\") && degrees\n              ? \"selected-blue\"\n              : null\n          }\n          onClick={btn.toggle}\n        >\n          {btn.btnText}\n        </button>\n      );\n    });\n  };\n\n  const renderDegreeOptions = (degrees) => {\n    // checkbox like keep open\n    return degrees ? (\n      <div className=\"degree-notation-options\">\n        <span type=\"text\">number degrees</span>\n        <button\n          id=\"swara-switch\"\n          className={swaraNotation ? \"degrees-on\" : \"swaras-on\"}\n          onClick={toggleIndianNotation}\n        ></button>\n        <span type=\"text\">indian swaras</span>\n      </div>\n    ) : null;\n  };\n\n  // const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  // const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n  const alteration = getAlteration(sharps);\n\n  useEffect(() => {\n    randomize();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-selector-container\">\n        <button id=\"randomize-button\" onClick={randomize}>\n          <span role=\"img\" aria-label=\"game-die\">\n            🎲\n          </span>\n        </button>\n        <div className=\"note-button-container\">\n          {renderNoteButtons(alteration)}\n        </div>\n        <ScaleDropdown options={scales} />\n      </div>\n      <div className=\"toggle-button-container\">\n        {renderToggleButtons()}\n        {renderDegreeOptions(degrees)}\n      </div>\n      <div className=\"main-display\">\n        {/* <div className=\"current-selection-string\">\n          <h4>{rootDisplay}</h4>\n          <h4>{scaleDisplay}</h4>\n        </div> */}\n        <Fretboard currentScale={currentScale}></Fretboard>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}