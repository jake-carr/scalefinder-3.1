{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Fretboard.js\";\n// renders: strings.\n// redux: options for number of strings which each render in that Standard Tuning, and a slider/input for number of frets.\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport String from \"./String\";\nimport stringOptions from \"../constants/stringOptions\";\n\nfunction Fretboard(props) {\n  // react.useState for a value (default 24), then a slider for number of frets.\n  // # of strings will be <dropdown> menu , rendered from stringOptions file\n  const {\n    numberOfStrings,\n    numberOfFrets,\n    currentScale\n  } = props;\n\n  const changeNumberOfFrets = value => {\n    props.changeNumberOfFrets(value);\n  };\n\n  const retrieveIndices = value => {\n    if (value === 6) {\n      return [...stringOptions[0].indices];\n    } else if (value === 7) {\n      return [...stringOptions[1].indices];\n    } else if (value === 8) {\n      return [...stringOptions[2].indices];\n    }\n  };\n\n  const renderGuitarStrings = () => {\n    const strings = retrieveIndices(numberOfStrings);\n    return strings.map((noteIndex, stringIndex) => {\n      return /*#__PURE__*/React.createElement(String, {\n        rootIndex: noteIndex,\n        stringIndex: stringIndex,\n        numberOfFrets: numberOfFrets,\n        scale: currentScale,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fretboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fretboard-options-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: changeNumberOfFrets,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Number of frets: \", props.numberOfFrets)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guitar-string-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, renderGuitarStrings()));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    numberOfStrings: state.numberOfStrings,\n    numberOfFrets: state.numberOfFrets\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNumberOfFrets: value => dispatch({\n      type: \"SET_FRET_COUNT\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fretboard);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Fretboard.js"],"names":["React","connect","String","stringOptions","Fretboard","props","numberOfStrings","numberOfFrets","currentScale","changeNumberOfFrets","value","retrieveIndices","indices","renderGuitarStrings","strings","map","noteIndex","stringIndex","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;AACA;AACA,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,aAAnB;AAAkCC,IAAAA;AAAlC,MAAmDH,KAAzD;;AAEA,QAAMI,mBAAmB,GAAIC,KAAD,IAAW;AACrCL,IAAAA,KAAK,CAACI,mBAAN,CAA0BC,KAA1B;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAID,KAAD,IAAW;AACjC,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,CAAC,GAAGP,aAAa,CAAC,CAAD,CAAb,CAAiBS,OAArB,CAAP;AACD,KAFD,MAEO,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACtB,aAAO,CAAC,GAAGP,aAAa,CAAC,CAAD,CAAb,CAAiBS,OAArB,CAAP;AACD,KAFM,MAEA,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACtB,aAAO,CAAC,GAAGP,aAAa,CAAC,CAAD,CAAb,CAAiBS,OAArB,CAAP;AACD;AACF,GARD;;AASA,QAAMC,mBAAmB,GAAG,MAAM;AAChC,UAAMC,OAAO,GAAGH,eAAe,CAACL,eAAD,CAA/B;AAEA,WAAOQ,OAAO,CAACC,GAAR,CAAY,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AAC7C,0BACE,oBAAC,MAAD;AACE,QAAA,SAAS,EAAED,SADb;AAEE,QAAA,WAAW,EAAEC,WAFf;AAGE,QAAA,aAAa,EAAEV,aAHjB;AAIE,QAAA,KAAK,EAAEC,YAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATM,CAAP;AAUD,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEC,mBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACoBJ,KAAK,CAACE,aAD1B,CADF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CM,mBAAmB,EAA7D,CANF,CADF;AAUD;;AAED,SAASK,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLb,IAAAA,eAAe,EAAEa,KAAK,CAACb,eADlB;AAELC,IAAAA,aAAa,EAAEY,KAAK,CAACZ;AAFhB,GAAP;AAID;;AAED,SAASa,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLZ,IAAAA,mBAAmB,EAAGC,KAAD,IACnBW,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAEb;AAAnC,KAAD;AAFL,GAAP;AAID;;AAED,eAAeT,OAAO,CAACiB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,SAA7C,CAAf","sourcesContent":["// renders: strings.\n// redux: options for number of strings which each render in that Standard Tuning, and a slider/input for number of frets.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport String from \"./String\";\nimport stringOptions from \"../constants/stringOptions\";\n\nfunction Fretboard(props) {\n  // react.useState for a value (default 24), then a slider for number of frets.\n  // # of strings will be <dropdown> menu , rendered from stringOptions file\n  const { numberOfStrings, numberOfFrets, currentScale } = props;\n\n  const changeNumberOfFrets = (value) => {\n    props.changeNumberOfFrets(value);\n  };\n\n  const retrieveIndices = (value) => {\n    if (value === 6) {\n      return [...stringOptions[0].indices];\n    } else if (value === 7) {\n      return [...stringOptions[1].indices];\n    } else if (value === 8) {\n      return [...stringOptions[2].indices];\n    }\n  };\n  const renderGuitarStrings = () => {\n    const strings = retrieveIndices(numberOfStrings);\n\n    return strings.map((noteIndex, stringIndex) => {\n      return (\n        <String\n          rootIndex={noteIndex}\n          stringIndex={stringIndex}\n          numberOfFrets={numberOfFrets}\n          scale={currentScale}\n        ></String>\n      );\n    });\n  };\n\n  return (\n    <div className=\"fretboard\">\n      <div className=\"fretboard-options-container\">\n        <button onClick={changeNumberOfFrets}>\n          Number of frets: {props.numberOfFrets}\n        </button>\n      </div>\n      <div className=\"guitar-string-container\">{renderGuitarStrings()}</div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    numberOfStrings: state.numberOfStrings,\n    numberOfFrets: state.numberOfFrets,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNumberOfFrets: (value) =>\n      dispatch({ type: \"SET_FRET_COUNT\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Fretboard);\n"]},"metadata":{},"sourceType":"module"}