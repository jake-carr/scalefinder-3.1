{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js\";\n// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Dropdown(props) {\n  const {\n    options,\n    role\n  } = props;\n\n  const renderOptions = () => {\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, options.map((item, idx) => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: \"dropdown-option\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: handleChange(role, idx),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }\n      }, item.name));\n    }));\n  };\n\n  const handleChange = (type, selection) => {\n    if (type === \"scale-selector\") {\n      props.setScaleIndex(selection);\n    }\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false); // handleChange rops. pass 'role' etc. code roles 1 @ a time\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"open the dropdown / display current selection\"), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    open: open,\n    onClose: handleClose,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, renderOptions()) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex // map to all, but only change (call dispatch) based on type?\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: value => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: value\n    }),\n    setScaleIndex: value => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js"],"names":["React","connect","Dropdown","props","options","role","renderOptions","map","item","idx","handleChange","name","type","selection","setScaleIndex","open","setOpen","useState","handleOpen","handleClose","mapStateToProps","state","selectedNoteIndex","selectedScaleIndex","mapDispatchToProps","dispatch","setNoteIndex","value","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,KAA1B;;AAEA,QAAMG,aAAa,GAAG,MAAM;AAC1B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAACG,GAAR,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC1B,0BACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAQ,QAAA,OAAO,EAAEC,YAAY,CAACL,IAAD,EAAOI,GAAP,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2CD,IAAI,CAACG,IAAhD,CADF,CADF;AAKD,KANA,CADH,CADF;AAWD,GAZD;;AAcA,QAAMD,YAAY,GAAG,CAACE,IAAD,EAAOC,SAAP,KAAqB;AACxC,QAAID,IAAI,KAAK,gBAAb,EAA+B;AAC7BT,MAAAA,KAAK,CAACW,aAAN,CAAoBD,SAApB;AACD;AACF,GAJD;;AAMA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBhB,KAAK,CAACiB,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvBF,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAAC,KAAD,CAAP,CADwB,CAExB;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,EAIGH,IAAI,gBACH;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,OAAO,EAAEI,WAHX;AAIE,IAAA,OAAO,EAAEA,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGb,aAAa,EANhB,CADG,GASD,IAbN,CADF;AAiBD;;AAED,SAASc,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,iBAAiB,EAAED,KAAK,CAACC,iBADpB;AAELC,IAAAA,kBAAkB,EAAEF,KAAK,CAACE,kBAFrB,CAGL;;AAHK,GAAP;AAKD;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,YAAY,EAAGC,KAAD,IACZF,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE,gBAAR;AAA0BgB,MAAAA,OAAO,EAAED;AAAnC,KAAD,CAFL;AAGLb,IAAAA,aAAa,EAAGa,KAAD,IACbF,QAAQ,CAAC;AAAEb,MAAAA,IAAI,EAAE,iBAAR;AAA2BgB,MAAAA,OAAO,EAAED;AAApC,KAAD;AAJL,GAAP;AAMD;;AAED,eAAe1B,OAAO,CAACmB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CtB,QAA7C,CAAf","sourcesContent":["// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Dropdown(props) {\n  const { options, role } = props;\n\n  const renderOptions = () => {\n    return (\n      <ul>\n        {options.map((item, idx) => {\n          return (\n            <li className=\"dropdown-option\">\n              <button onClick={handleChange(role, idx)}>{item.name}</button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  const handleChange = (type, selection) => {\n    if (type === \"scale-selector\") {\n      props.setScaleIndex(selection);\n    }\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // handleChange rops. pass 'role' etc. code roles 1 @ a time\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <button onClick={handleOpen}>\n        open the dropdown / display current selection\n      </button>\n      {open ? (\n        <div\n          className=\"modal\"\n          open={open}\n          onClose={handleClose}\n          onClick={handleClose}\n        >\n          {renderOptions()}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    // map to all, but only change (call dispatch) based on type?\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: (value) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: value }),\n    setScaleIndex: (value) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);\n"]},"metadata":{},"sourceType":"module"}