{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    scale,\n    label\n  } = props;\n\n  assignID = (note, highlight, scale, showUnused) => {\n    if (scale[0] === note && highlight) {\n      return \"highlighted\";\n    } else if (scale.includes(note)) {\n      return \"scale-note\";\n    } else if (showUnused) {\n      return \"unused-note\";\n    } else return \"blank-fret\";\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          // add logic for indian swaras\n          let degree = i + 1;\n          return degree.toString();\n        }\n      }\n    }\n  };\n\n  const renderLabel = () => {\n    if (label !== null) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fret-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 14\n        }\n      }, label.toString());\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fret\",\n    id: \"determined by props\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"fret-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, convertIndexToString(note, sharps)), renderLabel());\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);\n\nclass samplefretxd extends React.Component {\n  render() {\n    const {\n      note,\n      showUnusedNotes,\n      highlightRoots,\n      degrees,\n      sharps,\n      selectedScale\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fret\",\n      id: this.assignID(note, highlightRoots, selectedScale, showUnusedNotes),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, convertIndexToString(note, sharps), /*#__PURE__*/React.createElement(\"span\", {\n      className: degrees ? \"degree\" : \"hidden\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, this.getDegree(note, selectedScale)));\n  }\n\n}","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js"],"names":["React","connect","convertIndexToString","Fret","props","note","showUnusedNotes","highlightRoots","degrees","sharps","scale","label","assignID","highlight","showUnused","includes","getDegree","i","length","degree","toString","renderLabel","mapStateToProps","state","indianDegreeNotation","samplefretxd","Component","render","selectedScale"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    scale,\n    label,\n  } = props;\n\n  assignID = (note, highlight, scale, showUnused) => {\n    if (scale[0] === note && highlight) {\n      return \"highlighted\";\n    } else if (scale.includes(note)) {\n      return \"scale-note\";\n    } else if (showUnused) {\n      return \"unused-note\";\n    } else return \"blank-fret\";\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          // add logic for indian swaras\n          let degree = i + 1;\n          return degree.toString();\n        }\n      }\n    }\n  };\n\n  const renderLabel = () => {\n    if (label !== null) {\n      return <span className=\"fret-label\">{label.toString()}</span>;\n    }\n  };\n\n  return (\n    <div className=\"fret\" id=\"determined by props\">\n      <p className=\"fret-text\">{convertIndexToString(note, sharps)}</p>\n      {/* swaras, degrees */}\n      {renderLabel()}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps,\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);\n\nclass samplefretxd extends React.Component {\n  render() {\n    const {\n      note,\n      showUnusedNotes,\n      highlightRoots,\n      degrees,\n      sharps,\n      selectedScale,\n    } = this.props;\n    return (\n      <div\n        className=\"fret\"\n        id={this.assignID(note, highlightRoots, selectedScale, showUnusedNotes)}\n      >\n        {convertIndexToString(note, sharps)}\n        <span className={degrees ? \"degree\" : \"hidden\"}>\n          {this.getDegree(note, selectedScale)}\n        </span>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}