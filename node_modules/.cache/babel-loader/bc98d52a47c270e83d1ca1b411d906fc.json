{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport { convertIndexToString, getNotation, createScale } from \"./constants/utils\";\n\nfunction App(props) {\n  const {\n    sharps,\n    highlightRoots,\n    showUnusedNotes,\n    showDegrees,\n    indianDegreeNotation,\n    infoModalOpen,\n    selectedNoteIndex,\n    selectedScaleIndex\n  } = props;\n\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = {\n    sharps: {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true\n    },\n    highlightRoots: {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false\n    },\n    showUnusedNotes: {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false\n    },\n    showDegrees: {\n      toggle: toggleShowDegrees,\n      btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false\n    },\n    infoModal: {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true\n    }\n  };\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"round-button-purple\",\n        id: idx === selectedNoteIndex ? \"selected\" : null,\n        onClick: () => {\n          props.setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  const renderToggleButtons = () => {\n    console.log(toggleOptions.map(i => {\n      return i;\n    })); // return xyz.map((note, idx) => {\n    //   return (\n    //     <button\n    //       key={[note, idx]}\n    //       className=\"round-button-purple\"\n    //       id={idx === selectedNoteIndex ? \"selected\" : null}\n    //       onClick={() => {\n    //         props.setNoteIndex(idx);\n    //       }}\n    //     >\n    //       {note}\n    //     </button>\n    //   );\n    // });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const notation = getNotation(sharps);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, renderToggleButtons(), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleSharps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, props.sharps ? \"♭\" : \"♯\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleHighlightRoots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, props.highlightRoots ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleShowUnusedNotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, props.showUnusedNotes ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleShowDegrees,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, props.showDegrees ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, props.indianDegreeNotation ? \"true\" : \"false\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleInfoModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, props.infoModalOpen ? \"true\" : \"false\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, renderNoteButtons(notation)), /*#__PURE__*/React.createElement(Fretboard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","connect","Fretboard","scales","convertIndexToString","getNotation","createScale","App","props","sharps","highlightRoots","showUnusedNotes","showDegrees","indianDegreeNotation","infoModalOpen","selectedNoteIndex","selectedScaleIndex","toggleSharps","toggle","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","infoModal","randomize","setNoteIndex","Math","floor","random","setScaleIndex","length","renderNoteButtons","notation","map","note","idx","renderToggleButtons","console","log","i","rootDisplay","scaleDisplay","name","currentScale","pattern","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport scales from \"./constants/scales\";\nimport {\n  convertIndexToString,\n  getNotation,\n  createScale,\n} from \"./constants/utils\";\n\nfunction App(props) {\n  const {\n    sharps,\n    highlightRoots,\n    showUnusedNotes,\n    showDegrees,\n    indianDegreeNotation,\n    infoModalOpen,\n    selectedNoteIndex,\n    selectedScaleIndex,\n  } = props;\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"showDegrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"indianDegreeNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = {\n    sharps: {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    highlightRoots: {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    showUnusedNotes: {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false,\n    },\n    showDegrees: {\n      toggle: toggleShowDegrees,\n      btnText: props.showDegrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    infoModal: {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true,\n    },\n  };\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"round-button-purple\"\n          id={idx === selectedNoteIndex ? \"selected\" : null}\n          onClick={() => {\n            props.setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  const renderToggleButtons = () => {\n    console.log(\n      toggleOptions.map((i) => {\n        return i;\n      })\n    );\n    // return xyz.map((note, idx) => {\n    //   return (\n    //     <button\n    //       key={[note, idx]}\n    //       className=\"round-button-purple\"\n    //       id={idx === selectedNoteIndex ? \"selected\" : null}\n    //       onClick={() => {\n    //         props.setNoteIndex(idx);\n    //       }}\n    //     >\n    //       {note}\n    //     </button>\n    //   );\n    // });\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n  const notation = getNotation(sharps);\n\n  return (\n    <div className=\"App\">\n      <div className=\"toggle-button-container\">\n        {renderToggleButtons()}\n        <button onClick={toggleSharps}>{props.sharps ? \"♭\" : \"♯\"}</button>\n        <button onClick={toggleHighlightRoots}>\n          {props.highlightRoots ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleShowUnusedNotes}>\n          {props.showUnusedNotes ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleShowDegrees}>\n          {props.showDegrees ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleIndianNotation}>\n          {props.indianDegreeNotation ? \"true\" : \"false\"}\n        </button>\n        <button onClick={toggleInfoModal}>\n          {props.infoModalOpen ? \"true\" : \"false\"}\n        </button>\n      </div>\n      <div className=\"note-button-container\">{renderNoteButtons(notation)}</div>\n      {/* scale selectors */}\n      <Fretboard></Fretboard>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    showDegrees: state.showDegrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}