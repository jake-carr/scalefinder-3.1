{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/String.js\";\n// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { convertIndexToString, parse, swaras } from \"../constants/utils\";\nimport { connect } from \"react-redux\";\n\nfunction String(props) {\n  const {\n    numberOfFrets,\n    numberOfStrings,\n    rootIndex,\n    stringIndex,\n    scale,\n    sharps,\n    highlightRoots,\n    degrees,\n    swaraNotation\n  } = props;\n  const [tuning, changeTuning] = React.useState(rootIndex);\n\n  const tuneUp = () => {\n    changeTuning(parse(tuning + 1));\n  };\n\n  const tuneDown = () => {\n    tuning === 0 ? changeTuning(11) : changeTuning(parse(tuning - 1));\n  };\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(tuning + fretNumber);\n      let label;\n\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: [value, idx],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Fret, {\n        note: fretNote,\n        scale: scale,\n        label: stringIndex === numberOfStrings - 1 && fretLabels.includes(fretNumber) ? label : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          if (swaraNotation) {\n            return swaras[i];\n          } else {\n            let degree = i + 1;\n            return degree.toString();\n          }\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guitar-string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guitar-string-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-round-small-pink\",\n    onClick: tuneUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"\\u2191\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-round-small-pink\",\n    onClick: tuneDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"\\u2193\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"string-tuning\",\n    id: scale.includes(tuning) ? scale[0] === tuning && highlightRoots ? \"highlighted\" : \"scale-note\" : \"unused-note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, convertIndexToString(tuning, sharps), degrees ? /*#__PURE__*/React.createElement(\"span\", {\n    className: swaraNotation ? \"string-swara\" : \"string-degree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, getDegree(tuning, scale)) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fret-row-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, renderFrets()));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    numberOfStrings: state.numberOfStrings,\n    highlightRoots: state.numberOfStrings,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation\n  };\n}\n\nexport default connect(mapStateToProps)(String);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/String.js"],"names":["React","Fret","convertIndexToString","parse","swaras","connect","String","props","numberOfFrets","numberOfStrings","rootIndex","stringIndex","scale","sharps","highlightRoots","degrees","swaraNotation","tuning","changeTuning","useState","tuneUp","tuneDown","renderFrets","frets","Array","keys","fretLabels","map","value","idx","fretNumber","fretNote","label","includes","getDegree","note","i","length","degree","toString","mapStateToProps","state"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,oBAAT,EAA+BC,KAA/B,EAAsCC,MAAtC,QAAoD,oBAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA;AATI,MAUFT,KAVJ;AAWA,QAAM,CAACU,MAAD,EAASC,YAAT,IAAyBlB,KAAK,CAACmB,QAAN,CAAeT,SAAf,CAA/B;;AAEA,QAAMU,MAAM,GAAG,MAAM;AACnBF,IAAAA,YAAY,CAACf,KAAK,CAACc,MAAM,GAAG,CAAV,CAAN,CAAZ;AACD,GAFD;;AAIA,QAAMI,QAAQ,GAAG,MAAM;AACrBJ,IAAAA,MAAM,KAAK,CAAX,GAAeC,YAAY,CAAC,EAAD,CAA3B,GAAkCA,YAAY,CAACf,KAAK,CAACc,MAAM,GAAG,CAAV,CAAN,CAA9C;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAG,MAAM;AACxB,UAAMC,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAChB,aAAD,CAAL,CAAqBiB,IAArB,EAAJ,CAAd;AACA,UAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,CAAnB;AACA,WAAOH,KAAK,CAACI,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC/B,YAAMC,UAAU,GAAGD,GAAG,GAAG,CAAzB;AACA,YAAME,QAAQ,GAAG5B,KAAK,CAACc,MAAM,GAAGa,UAAV,CAAtB;AACA,UAAIE,KAAJ;;AACA,UAAIN,UAAU,CAACO,QAAX,CAAoBH,UAApB,CAAJ,EAAqC;AACnCE,QAAAA,KAAK,GAAGF,UAAR;AACD;;AACD,0BACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,GAAG,EAAE,CAACF,KAAD,EAAQC,GAAR,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AACE,QAAA,IAAI,EAAEE,QADR;AAEE,QAAA,KAAK,EAAEnB,KAFT;AAGE,QAAA,KAAK,EACHD,WAAW,KAAKF,eAAe,GAAG,CAAlC,IACAiB,UAAU,CAACO,QAAX,CAAoBH,UAApB,CADA,GAEIE,KAFJ,GAGI,IAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAcD,KArBM,CAAP;AAsBD,GAzBD;;AA2BA,QAAME,SAAS,GAAG,CAACC,IAAD,EAAOvB,KAAP,KAAiB;AACjC,QAAIA,KAAK,CAACqB,QAAN,CAAeE,IAAf,CAAJ,EAA0B;AACxB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,KAAK,CAACyB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIxB,KAAK,CAACwB,CAAD,CAAL,KAAaD,IAAjB,EAAuB;AACrB,cAAInB,aAAJ,EAAmB;AACjB,mBAAOZ,MAAM,CAACgC,CAAD,CAAb;AACD,WAFD,MAEO;AACL,gBAAIE,MAAM,GAAGF,CAAC,GAAG,CAAjB;AACA,mBAAOE,MAAM,CAACC,QAAP,EAAP;AACD;AACF;AACF;AACF;AACF,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAA4C,IAAA,OAAO,EAAEnB,MAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAA4C,IAAA,OAAO,EAAEC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,EAAE,EACAT,KAAK,CAACqB,QAAN,CAAehB,MAAf,IACIL,KAAK,CAAC,CAAD,CAAL,KAAaK,MAAb,IAAuBH,cAAvB,GACE,aADF,GAEE,YAHN,GAII,aAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGZ,oBAAoB,CAACe,MAAD,EAASJ,MAAT,CAVvB,EAWGE,OAAO,gBACN;AAAM,IAAA,SAAS,EAAEC,aAAa,GAAG,cAAH,GAAoB,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkB,SAAS,CAACjB,MAAD,EAASL,KAAT,CADZ,CADM,GAIJ,IAfN,CAPF,CADF,eA0BE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCU,WAAW,EAA9C,CA1BF,CADF;AA8BD;;AAED,SAASkB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACL5B,IAAAA,MAAM,EAAE4B,KAAK,CAAC5B,MADT;AAELJ,IAAAA,eAAe,EAAEgC,KAAK,CAAChC,eAFlB;AAGLK,IAAAA,cAAc,EAAE2B,KAAK,CAAChC,eAHjB;AAILM,IAAAA,OAAO,EAAE0B,KAAK,CAAC1B,OAJV;AAKLC,IAAAA,aAAa,EAAEyB,KAAK,CAACzB;AALhB,GAAP;AAOD;;AAED,eAAeX,OAAO,CAACmC,eAAD,CAAP,CAAyBlC,MAAzB,CAAf","sourcesContent":["// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\n\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { convertIndexToString, parse, swaras } from \"../constants/utils\";\nimport { connect } from \"react-redux\";\n\nfunction String(props) {\n  const {\n    numberOfFrets,\n    numberOfStrings,\n    rootIndex,\n    stringIndex,\n    scale,\n    sharps,\n    highlightRoots,\n    degrees,\n    swaraNotation,\n  } = props;\n  const [tuning, changeTuning] = React.useState(rootIndex);\n\n  const tuneUp = () => {\n    changeTuning(parse(tuning + 1));\n  };\n\n  const tuneDown = () => {\n    tuning === 0 ? changeTuning(11) : changeTuning(parse(tuning - 1));\n  };\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(tuning + fretNumber);\n      let label;\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n      return (\n        <React.Fragment key={[value, idx]}>\n          <Fret\n            note={fretNote}\n            scale={scale}\n            label={\n              stringIndex === numberOfStrings - 1 &&\n              fretLabels.includes(fretNumber)\n                ? label\n                : null\n            }\n          ></Fret>\n        </React.Fragment>\n      );\n    });\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          if (swaraNotation) {\n            return swaras[i];\n          } else {\n            let degree = i + 1;\n            return degree.toString();\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"guitar-string\">\n      <div className=\"guitar-string-head\">\n        <button className=\"button-round-small-pink\" onClick={tuneUp}>\n          &#8593;\n        </button>\n        <button className=\"button-round-small-pink\" onClick={tuneDown}>\n          &#8595;\n        </button>\n        <div\n          className=\"string-tuning\"\n          id={\n            scale.includes(tuning)\n              ? scale[0] === tuning && highlightRoots\n                ? \"highlighted\"\n                : \"scale-note\"\n              : \"unused-note\"\n          }\n        >\n          {convertIndexToString(tuning, sharps)}\n          {degrees ? (\n            <span className={swaraNotation ? \"string-swara\" : \"string-degree\"}>\n              {getDegree(tuning, scale)}\n            </span>\n          ) : null}\n        </div>\n      </div>\n      <div className=\"fret-row-wrapper\">{renderFrets()}</div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    numberOfStrings: state.numberOfStrings,\n    highlightRoots: state.numberOfStrings,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation,\n  };\n}\n\nexport default connect(mapStateToProps)(String);\n"]},"metadata":{},"sourceType":"module"}