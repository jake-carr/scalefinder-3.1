{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    scale,\n    label\n  } = props;\n\n  const assignID = () => {\n    if (scale[0] === note && highlightRoots) {\n      return \"highlighted\";\n    } else if (scale.includes(note)) {\n      return \"scale-note\";\n    } else if (showUnusedNotes) {\n      return \"unused-note\";\n    } else return \"blank-fret\";\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          // add logic for indian swaras\n          let degree = i + 1;\n          return degree.toString();\n        }\n      }\n    }\n  };\n\n  const renderLabel = () => {\n    if (label !== null) {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fret-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 14\n        }\n      }, label.toString());\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fret\",\n    id: assignID,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"fret-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, convertIndexToString(note, sharps)), renderLabel());\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Fret.js"],"names":["React","connect","convertIndexToString","Fret","props","note","showUnusedNotes","highlightRoots","degrees","sharps","scale","label","assignID","includes","getDegree","i","length","degree","toString","renderLabel","mapStateToProps","state","indianDegreeNotation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,QAAqC,oBAArC;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB;AACA,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA;AAPI,MAQFP,KARJ;;AAUA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,QAAIF,KAAK,CAAC,CAAD,CAAL,KAAaL,IAAb,IAAqBE,cAAzB,EAAyC;AACvC,aAAO,aAAP;AACD,KAFD,MAEO,IAAIG,KAAK,CAACG,QAAN,CAAeR,IAAf,CAAJ,EAA0B;AAC/B,aAAO,YAAP;AACD,KAFM,MAEA,IAAIC,eAAJ,EAAqB;AAC1B,aAAO,aAAP;AACD,KAFM,MAEA,OAAO,YAAP;AACR,GARD;;AAUA,QAAMQ,SAAS,GAAG,CAACT,IAAD,EAAOK,KAAP,KAAiB;AACjC,QAAIA,KAAK,CAACG,QAAN,CAAeR,IAAf,CAAJ,EAA0B;AACxB,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIL,KAAK,CAACK,CAAD,CAAL,KAAaV,IAAjB,EAAuB;AACrB;AACA,cAAIY,MAAM,GAAGF,CAAC,GAAG,CAAjB;AACA,iBAAOE,MAAM,CAACC,QAAP,EAAP;AACD;AACF;AACF;AACF,GAVD;;AAYA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIR,KAAK,KAAK,IAAd,EAAoB;AAClB,0BAAO;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BA,KAAK,CAACO,QAAN,EAA9B,CAAP;AACD;AACF,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAEN,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BV,oBAAoB,CAACG,IAAD,EAAOI,MAAP,CAA9C,CADF,EAGGU,WAAW,EAHd,CADF;AAOD;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLZ,IAAAA,MAAM,EAAEY,KAAK,CAACZ,MADT;AAELH,IAAAA,eAAe,EAAEe,KAAK,CAACf,eAFlB;AAGLC,IAAAA,cAAc,EAAEc,KAAK,CAACd,cAHjB;AAILC,IAAAA,OAAO,EAAEa,KAAK,CAACb,OAJV;AAKLc,IAAAA,oBAAoB,EAAED,KAAK,CAACC,oBALvB;AAMLb,IAAAA,MAAM,EAAEY,KAAK,CAACZ;AANT,GAAP;AAQD;;AAED,eAAeR,OAAO,CAACmB,eAAD,CAAP,CAAyBjB,IAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { convertIndexToString } from \"../constants/utils\";\n\nfunction Fret(props) {\n  // need to pass scale to this, everything else from state?\n  const {\n    note,\n    showUnusedNotes,\n    highlightRoots,\n    degrees,\n    sharps,\n    scale,\n    label,\n  } = props;\n\n  const assignID = () => {\n    if (scale[0] === note && highlightRoots) {\n      return \"highlighted\";\n    } else if (scale.includes(note)) {\n      return \"scale-note\";\n    } else if (showUnusedNotes) {\n      return \"unused-note\";\n    } else return \"blank-fret\";\n  };\n\n  const getDegree = (note, scale) => {\n    if (scale.includes(note)) {\n      for (let i = 0; i < scale.length; i++) {\n        if (scale[i] === note) {\n          // add logic for indian swaras\n          let degree = i + 1;\n          return degree.toString();\n        }\n      }\n    }\n  };\n\n  const renderLabel = () => {\n    if (label !== null) {\n      return <span className=\"fret-label\">{label.toString()}</span>;\n    }\n  };\n\n  return (\n    <div className=\"fret\" id={assignID}>\n      <p className=\"fret-text\">{convertIndexToString(note, sharps)}</p>\n      {/* swaras, degrees */}\n      {renderLabel()}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    showUnusedNotes: state.showUnusedNotes,\n    highlightRoots: state.highlightRoots,\n    degrees: state.degrees,\n    indianDegreeNotation: state.indianDegreeNotation,\n    sharps: state.sharps,\n  };\n}\n\nexport default connect(mapStateToProps)(Fret);\n"]},"metadata":{},"sourceType":"module"}