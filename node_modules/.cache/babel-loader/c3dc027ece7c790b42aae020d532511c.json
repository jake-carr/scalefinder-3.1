{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/ScaleDropdown.js\";\n// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleDropdown(props) {\n  const {\n    options,\n    selectedScaleIndex\n  } = props;\n\n  const renderOptions = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-option-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, options.map((item, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [item, idx],\n        className: \"dropdown-option-button\",\n        onClick: () => {\n          props.setScaleIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }\n      }, item.name);\n    }));\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const [keepOpen, toggleKeep] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    if (keepOpen === false) {\n      setOpen(false);\n    }\n  };\n\n  const toggleKeepOpen = () => {\n    toggleKeep(!keepOpen);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"dropdown-open-button\",\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, options[selectedScaleIndex].name), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    open: open,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"keep-scales-open-toggle-button\",\n    onClick: toggleKeepOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Keep this menu open: \", keepOpen.toString()), renderOptions()) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: value => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleDropdown);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/ScaleDropdown.js"],"names":["React","connect","ScaleDropdown","props","options","selectedScaleIndex","renderOptions","map","item","idx","setScaleIndex","name","open","setOpen","useState","keepOpen","toggleKeep","handleOpen","handleClose","toggleKeepOpen","toString","mapStateToProps","state","mapDispatchToProps","dispatch","value","type","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAkCF,KAAxC;;AAEA,QAAMG,aAAa,GAAG,MAAM;AAC1B,wBACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,OAAO,CAACG,GAAR,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC1B,0BACE;AACE,QAAA,GAAG,EAAE,CAACD,IAAD,EAAOC,GAAP,CADP;AAEE,QAAA,SAAS,EAAC,wBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbN,UAAAA,KAAK,CAACO,aAAN,CAAoBD,GAApB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGD,IAAI,CAACG,IAPR,CADF;AAWD,KAZA,CADH,CADF;AAiBD,GAlBD;;AAoBA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,KAAK,CAACc,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBhB,KAAK,CAACc,QAAN,CAAe,KAAf,CAA/B;;AAEA,QAAMG,UAAU,GAAG,MAAM;AACvBJ,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,QAAMM,WAAW,GAAG,MAAM;AACxB,QAAIH,QAAQ,KAAK,KAAjB,EAAwB;AACtBF,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,GAJD;;AAMA,QAAMM,cAAc,GAAG,MAAM;AAC3BH,IAAAA,UAAU,CAAC,CAACD,QAAF,CAAV;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,sBAAlB;AAAyC,IAAA,OAAO,EAAEE,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,OAAO,CAACC,kBAAD,CAAP,CAA4BM,IAD/B,CADF,EAIGC,IAAI,gBACH;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,IAAI,EAAEA,IAA7B;AAAmC,IAAA,OAAO,EAAEM,WAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,gCADZ;AAEE,IAAA,OAAO,EAAEC,cAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAIwBJ,QAAQ,CAACK,QAAT,EAJxB,CADF,EAOGd,aAAa,EAPhB,CADG,GAUD,IAdN,CADF;AAkBD;;AAED,SAASe,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLjB,IAAAA,kBAAkB,EAAEiB,KAAK,CAACjB;AADrB,GAAP;AAGD;;AAED,SAASkB,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLd,IAAAA,aAAa,EAAGe,KAAD,IACbD,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEF;AAApC,KAAD;AAFL,GAAP;AAID;;AAED,eAAexB,OAAO,CAACoB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CrB,aAA7C,CAAf","sourcesContent":["// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleDropdown(props) {\n  const { options, selectedScaleIndex } = props;\n\n  const renderOptions = () => {\n    return (\n      <div className=\"dropdown-option-container\">\n        {options.map((item, idx) => {\n          return (\n            <button\n              key={[item, idx]}\n              className=\"dropdown-option-button\"\n              onClick={() => {\n                props.setScaleIndex(idx);\n              }}\n            >\n              {item.name}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const [open, setOpen] = React.useState(false);\n  const [keepOpen, toggleKeep] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    if (keepOpen === false) {\n      setOpen(false);\n    }\n  };\n\n  const toggleKeepOpen = () => {\n    toggleKeep(!keepOpen);\n  };\n\n  return (\n    <div className=\"scale-dropdown\">\n      <button className=\"dropdown-open-button\" onClick={handleOpen}>\n        {options[selectedScaleIndex].name}\n      </button>\n      {open ? (\n        <div className=\"modal\" open={open} onClose={handleClose}>\n          <button\n            className=\"keep-scales-open-toggle-button\"\n            onClick={toggleKeepOpen}\n          >\n            Keep this menu open: {keepOpen.toString()}\n          </button>\n          {renderOptions()}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: (value) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleDropdown);\n"]},"metadata":{},"sourceType":"module"}