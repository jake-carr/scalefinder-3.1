{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/ScaleDropdown.js\";\n// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleDropdown(props) {\n  const {\n    options\n  } = props;\n\n  const renderOptions = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-option-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }\n    }, options.map((item, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [item, idx],\n        className: \"dropdown-option-button\",\n        onClick: () => {\n          props.setScaleIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 13\n        }\n      }, item.name);\n    }));\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"dropdown-open-button\",\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, options[props.selectedScaleIndex].name), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    open: open,\n    onClose: handleClose,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, renderOptions()) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: value => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleDropdown);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/ScaleDropdown.js"],"names":["React","connect","ScaleDropdown","props","options","renderOptions","map","item","idx","setScaleIndex","name","open","setOpen","useState","handleOpen","handleClose","selectedScaleIndex","mapStateToProps","state","mapDispatchToProps","dispatch","value","type","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;;AACA,QAAME,aAAa,GAAG,MAAM;AAC1B,wBACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,OAAO,CAACE,GAAR,CAAY,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC1B,0BACE;AACE,QAAA,GAAG,EAAE,CAACD,IAAD,EAAOC,GAAP,CADP;AAEE,QAAA,SAAS,EAAC,wBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbL,UAAAA,KAAK,CAACM,aAAN,CAAoBD,GAApB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGD,IAAI,CAACG,IAPR,CADF;AAWD,KAZA,CADH,CADF;AAiBD,GAlBD;;AAoBA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,KAAK,CAACa,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvBF,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,sBAAlB;AAAyC,IAAA,OAAO,EAAEE,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,OAAO,CAACD,KAAK,CAACa,kBAAP,CAAP,CAAkCN,IADrC,CADF,EAIGC,IAAI,gBACH;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,OAAO,EAAEI,WAHX;AAIE,IAAA,OAAO,EAAEA,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGV,aAAa,EANhB,CADG,GASD,IAbN,CADF;AAiBD;;AAED,SAASY,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLF,IAAAA,kBAAkB,EAAEE,KAAK,CAACF;AADrB,GAAP;AAGD;;AAED,SAASG,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLX,IAAAA,aAAa,EAAGY,KAAD,IACbD,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEF;AAApC,KAAD;AAFL,GAAP;AAID;;AAED,eAAepB,OAAO,CAACgB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,aAA7C,CAAf","sourcesContent":["// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleDropdown(props) {\n  const { options } = props;\n  const renderOptions = () => {\n    return (\n      <div className=\"dropdown-option-container\">\n        {options.map((item, idx) => {\n          return (\n            <button\n              key={[item, idx]}\n              className=\"dropdown-option-button\"\n              onClick={() => {\n                props.setScaleIndex(idx);\n              }}\n            >\n              {item.name}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"scale-dropdown\">\n      <button className=\"dropdown-open-button\" onClick={handleOpen}>\n        {options[props.selectedScaleIndex].name}\n      </button>\n      {open ? (\n        <div\n          className=\"modal\"\n          open={open}\n          onClose={handleClose}\n          onClick={handleClose}\n        >\n          {renderOptions()}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: (value) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleDropdown);\n"]},"metadata":{},"sourceType":"module"}