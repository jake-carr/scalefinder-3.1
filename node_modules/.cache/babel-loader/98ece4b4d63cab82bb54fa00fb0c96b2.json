{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/ScaleTray.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleTray(props) {\n  const {\n    options,\n    selectedScaleIndex\n  } = props;\n  const [open, setOpen] = React.useState(false);\n  const [keepOpen, toggleKeep] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    if (keepOpen === false) {\n      setOpen(false);\n    } else {\n      return null;\n    }\n  };\n\n  const toggleKeepOpen = () => {\n    toggleKeep(!keepOpen);\n  };\n\n  const renderOptions = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"scale-button-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, options.map((item, idx) => {\n      const rows = {\n        row1: [0, 5],\n        row2: [6, 11],\n        row3: [12, 17],\n        row4: [18, 23]\n      };\n\n      const inRange = (x, min, max) => {\n        return (x - min) * (x - max) <= 0;\n      };\n\n      const getClass = i => {\n        if (inRange(i, rows.row1[0], rows.row1[1])) {\n          return \"scale-button-row1\";\n        } else if (inRange(i, rows.row2[0], rows.row2[1])) {\n          return \"scale-button-row2\";\n        } else if (inRange(i, rows.row3[0], rows.row3[1])) {\n          return \"scale-button-row3\";\n        } else if (inRange(i, rows.row4[0], rows.row4[1])) {\n          return \"scale-button-row4\";\n        }\n      };\n\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [item, idx],\n        className: getClass(idx),\n        id: idx === selectedScaleIndex ? \"selected\" : null,\n        onClick: () => {\n          props.setScaleIndex(idx);\n          handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, item.name);\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-tray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"open-scale-tray-button\",\n    id: open ? \"open\" : null,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, options[selectedScaleIndex].name), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-tray-open\",\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, renderOptions(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scale-tray-footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: keepOpen ? \"toggle-switch-on\" : \"toggle-switch-off\",\n    id: \"toggle-switch\",\n    onClick: toggleKeepOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, \"Keep scale tray open\"))) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: value => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTray);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/ScaleTray.js"],"names":["React","connect","ScaleTray","props","options","selectedScaleIndex","open","setOpen","useState","keepOpen","toggleKeep","handleOpen","handleClose","toggleKeepOpen","renderOptions","map","item","idx","rows","row1","row2","row3","row4","inRange","x","min","max","getClass","i","setScaleIndex","name","mapStateToProps","state","mapDispatchToProps","dispatch","value","type","payload"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction ScaleTray(props) {\n  const { options, selectedScaleIndex } = props;\n\n  const [open, setOpen] = React.useState(false);\n  const [keepOpen, toggleKeep] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    if (keepOpen === false) {\n      setOpen(false);\n    } else {\n      return null;\n    }\n  };\n\n  const toggleKeepOpen = () => {\n    toggleKeep(!keepOpen);\n  };\n\n  const renderOptions = () => {\n    return (\n      <div className=\"scale-button-grid\">\n        {options.map((item, idx) => {\n          const rows = {\n            row1: [0, 5],\n            row2: [6, 11],\n            row3: [12, 17],\n            row4: [18, 23],\n          };\n          const inRange = (x, min, max) => {\n            return (x - min) * (x - max) <= 0;\n          };\n          const getClass = (i) => {\n            if (inRange(i, rows.row1[0], rows.row1[1])) {\n              return \"scale-button-row1\";\n            } else if (inRange(i, rows.row2[0], rows.row2[1])) {\n              return \"scale-button-row2\";\n            } else if (inRange(i, rows.row3[0], rows.row3[1])) {\n              return \"scale-button-row3\";\n            } else if (inRange(i, rows.row4[0], rows.row4[1])) {\n              return \"scale-button-row4\";\n            }\n          };\n          return (\n            <button\n              key={[item, idx]}\n              className={getClass(idx)}\n              id={idx === selectedScaleIndex ? \"selected\" : null}\n              onClick={() => {\n                props.setScaleIndex(idx);\n                handleClose();\n              }}\n            >\n              {item.name}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"scale-tray\">\n      <button\n        className=\"open-scale-tray-button\"\n        id={open ? \"open\" : null}\n        onClick={handleOpen}\n      >\n        {options[selectedScaleIndex].name}\n      </button>\n      {open ? (\n        <div className=\"scale-tray-open\" onClose={handleClose}>\n          {renderOptions()}\n          <div className=\"scale-tray-footer\">\n            <button\n              className={keepOpen ? \"toggle-switch-on\" : \"toggle-switch-off\"}\n              id=\"toggle-switch\"\n              onClick={toggleKeepOpen}\n            ></button>{\" \"}\n            <span type=\"text\">Keep scale tray open</span>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScaleIndex: (value) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScaleTray);\n"]},"metadata":{},"sourceType":"module"}