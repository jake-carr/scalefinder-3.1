{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/String.js\";\n// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { convertIndexToString, parse } from \"../constants/utils\";\nimport { connect } from \"react-redux\";\n\nfunction String(props) {\n  const {\n    numberOfFrets,\n    numberOfStrings,\n    rootIndex,\n    stringIndex,\n    scale,\n    sharps\n  } = props;\n  const [tuning, changeTuning] = React.useState(rootIndex);\n\n  const tuneUp = () => {\n    changeTuning(parse(tuning + 1));\n  };\n\n  const tuneDown = () => {\n    tuning === 0 ? changeTuning(11) : changeTuning(parse(tuning - 1));\n  };\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(tuning + fretNumber);\n      let label;\n\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: [value, idx],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Fret, {\n        note: fretNote,\n        scale: scale,\n        label: stringIndex === numberOfStrings - 1 && fretLabels.includes(fretNumber) ? label : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"guitar-string\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-round-small-pink\",\n    onClick: tuneUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"\\u2191\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button-round-small-pink\",\n    onClick: tuneDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"\\u2193\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"string-tuning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, convertIndexToString(tuning, sharps)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fret-row-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, renderFrets()));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    numberOfStrings: state.numberOfStrings\n  };\n}\n\nexport default connect(mapStateToProps)(String);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/String.js"],"names":["React","Fret","convertIndexToString","parse","connect","String","props","numberOfFrets","numberOfStrings","rootIndex","stringIndex","scale","sharps","tuning","changeTuning","useState","tuneUp","tuneDown","renderFrets","frets","Array","keys","fretLabels","map","value","idx","fretNumber","fretNote","label","includes","mapStateToProps","state"],"mappings":"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","sourcesContent":["// renders number of frets from store; with root note based on standard tuning for number of strings\n// has state and can change its own tuning; marker will indicate custom tuning\n\nimport React from \"react\";\nimport Fret from \"./Fret\";\nimport { convertIndexToString, parse } from \"../constants/utils\";\nimport { connect } from \"react-redux\";\n\nfunction String(props) {\n  const {\n    numberOfFrets,\n    numberOfStrings,\n    rootIndex,\n    stringIndex,\n    scale,\n    sharps,\n  } = props;\n  const [tuning, changeTuning] = React.useState(rootIndex);\n\n  const tuneUp = () => {\n    changeTuning(parse(tuning + 1));\n  };\n\n  const tuneDown = () => {\n    tuning === 0 ? changeTuning(11) : changeTuning(parse(tuning - 1));\n  };\n\n  const renderFrets = () => {\n    const frets = [...Array(numberOfFrets).keys()];\n    const fretLabels = [1, 3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    return frets.map((value, idx) => {\n      const fretNumber = idx + 1;\n      const fretNote = parse(tuning + fretNumber);\n      let label;\n      if (fretLabels.includes(fretNumber)) {\n        label = fretNumber;\n      }\n      return (\n        <React.Fragment key={[value, idx]}>\n          <Fret\n            note={fretNote}\n            scale={scale}\n            label={\n              stringIndex === numberOfStrings - 1 &&\n              fretLabels.includes(fretNumber)\n                ? label\n                : null\n            }\n          ></Fret>\n        </React.Fragment>\n      );\n    });\n  };\n\n  return (\n    <div className=\"guitar-string\">\n      <button className=\"button-round-small-pink\" onClick={tuneUp}>\n        &#8593;\n      </button>\n      <button className=\"button-round-small-pink\" onClick={tuneDown}>\n        &#8595;\n      </button>\n      <p className=\"string-tuning\">{convertIndexToString(tuning, sharps)}</p>\n      <div className=\"fret-row-wrapper\">{renderFrets()}</div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    numberOfStrings: state.numberOfStrings,\n  };\n}\n\nexport default connect(mapStateToProps)(String);\n"]},"metadata":{},"sourceType":"module"}