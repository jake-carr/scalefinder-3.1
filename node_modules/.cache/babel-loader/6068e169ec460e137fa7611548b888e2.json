{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js\";\n// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport scales from \"../constants/scales\";\n\nfunction Dropdown(props) {\n  if (props.role === \"scale-selector\") {\n    const handleChange = selection => {\n      props.setScaleIndex(selection);\n    };\n\n    const renderOptions = () => {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      }, scales.map((scale, idx) => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          onClick: handleChange(idx),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 20\n          }\n        }, scale.name);\n      }));\n    };\n  } // depending on props.type or props.role (\"note-selector\", or \"scale-selector\" etc), get Options\n  // state/store/props need to be handled onChange for selected value (note index, scale index, num of strings etc)\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false); // handleChange rops. pass 'role' etc. code roles 1 @ a time\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"open the dropdown / display current selection\"), open ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    open: open,\n    onClose: handleClose,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, renderOptions()) : null);\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex // map to all, but only change (call dispatch) based on type?\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: value => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: value\n    }),\n    setScaleIndex: value => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/components/Dropdown.js"],"names":["React","connect","scales","Dropdown","props","role","handleChange","selection","setScaleIndex","renderOptions","map","scale","idx","name","open","setOpen","useState","handleOpen","handleClose","mapStateToProps","state","selectedNoteIndex","selectedScaleIndex","mapDispatchToProps","dispatch","setNoteIndex","value","type","payload"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIA,KAAK,CAACC,IAAN,KAAe,gBAAnB,EAAqC;AACnC,UAAMC,YAAY,GAAIC,SAAD,IAAe;AAClCH,MAAAA,KAAK,CAACI,aAAN,CAAoBD,SAApB;AACD,KAFD;;AAGA,UAAME,aAAa,GAAG,MAAM;AAC1B,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,MAAM,CAACQ,GAAP,CAAW,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,4BAAO;AAAI,UAAA,OAAO,EAAEN,YAAY,CAACM,GAAD,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCD,KAAK,CAACE,IAAvC,CAAP;AACD,OAFA,CADH,CADF;AAOD,KARD;AASD,GAdsB,CAevB;AACA;;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAxB;;AAEA,QAAMC,UAAU,GAAG,MAAM;AACvBF,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACD,GAFD;;AAIA,QAAMI,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAAC,KAAD,CAAP,CADwB,CAExB;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEE,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,EAIGH,IAAI,gBACH;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,OAAO,EAAEI,WAHX;AAIE,IAAA,OAAO,EAAEA,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,aAAa,EANhB,CADG,GASD,IAbN,CADF;AAiBD;;AAED,SAASU,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,iBAAiB,EAAED,KAAK,CAACC,iBADpB;AAELC,IAAAA,kBAAkB,EAAEF,KAAK,CAACE,kBAFrB,CAGL;;AAHK,GAAP;AAKD;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,YAAY,EAAGC,KAAD,IACZF,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,gBAAR;AAA0BC,MAAAA,OAAO,EAAEF;AAAnC,KAAD,CAFL;AAGLlB,IAAAA,aAAa,EAAGkB,KAAD,IACbF,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEF;AAApC,KAAD;AAJL,GAAP;AAMD;;AAED,eAAezB,OAAO,CAACkB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CpB,QAA7C,CAAf","sourcesContent":["// need to make generic dropdown that takes an array and connects to the right store\n// use same dropdown for: scales, preset tunings, number of strings, possibly even notes depending on what ui looks like\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport scales from \"../constants/scales\";\n\nfunction Dropdown(props) {\n  if (props.role === \"scale-selector\") {\n    const handleChange = (selection) => {\n      props.setScaleIndex(selection);\n    };\n    const renderOptions = () => {\n      return (\n        <ul>\n          {scales.map((scale, idx) => {\n            return <li onClick={handleChange(idx)}>{scale.name}</li>;\n          })}\n        </ul>\n      );\n    };\n  }\n  // depending on props.type or props.role (\"note-selector\", or \"scale-selector\" etc), get Options\n  // state/store/props need to be handled onChange for selected value (note index, scale index, num of strings etc)\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // handleChange rops. pass 'role' etc. code roles 1 @ a time\n  };\n\n  return (\n    <div className=\"dropdown\">\n      <button onClick={handleOpen}>\n        open the dropdown / display current selection\n      </button>\n      {open ? (\n        <div\n          className=\"modal\"\n          open={open}\n          onClose={handleClose}\n          onClick={handleClose}\n        >\n          {renderOptions()}\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    // map to all, but only change (call dispatch) based on type?\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setNoteIndex: (value) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: value }),\n    setScaleIndex: (value) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);\n"]},"metadata":{},"sourceType":"module"}