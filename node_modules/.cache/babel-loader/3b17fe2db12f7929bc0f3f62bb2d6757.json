{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/personal_projects/scalefinder-v3/src/App.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleTray from \"./components/ScaleTray\";\nimport InfoPopup from \"./components/InfoPopup\";\nimport MobilePage from \"./components/MobilePage\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale, retrieveLocalStorage } from \"./constants/utils\";\nconst iSymbol = /*#__PURE__*/React.createElement(\"span\", {\n  type: \"text\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 17\n  }\n}, \" \\u2139\");\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    sargamNotation,\n    sharps,\n    degrees,\n    infoModalOpen,\n    showUnusedNotes,\n    setNoteIndex,\n    setScaleIndex,\n    setFretCount,\n    setStringCount,\n    toggle\n  } = props;\n\n  const toggleSharps = () => {\n    toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    toggle(\"sargamNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [{\n    toggle: toggleSharps,\n    btnText: sharps ? \"♭\" : \"♯\",\n    round: true\n  }, {\n    toggle: toggleHighlightRoots,\n    btnText: \"Highlight roots\",\n    round: false\n  }, {\n    toggle: toggleShowUnusedNotes,\n    btnText: showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n    round: false\n  }, {\n    toggle: toggleShowDegrees,\n    btnText: degrees ? \"Hide degrees\" : \"Show degrees\",\n    round: false\n  }, {\n    toggle: toggleInfoModal,\n    btnText: iSymbol,\n    round: true\n  }];\n\n  const randomize = () => {\n    setNoteIndex(Math.floor(Math.random() * 12));\n    setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const resetToDefaults = () => {\n    setFretCount(12);\n    setStringCount(6);\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"note-button\",\n        id: idx === selectedNoteIndex ? \"selected\" : \"unselected\",\n        onClick: () => {\n          setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: btn.round ? \"round-button-gray\" : \"rectangular-button-gray\",\n        id: btn.btnText === \"Highlight roots\" && highlightRoots ? \"selected-green\" : !btn.round && btn.btnText.includes(\"degrees\") && degrees ? \"selected-blue\" : null,\n        onClick: btn.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }, btn.btnText);\n    });\n  };\n\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const alteration = getAlteration(sharps);\n  let isMobile = false;\n\n  if (/Mobi/.test(navigator.userAgent)) {\n    isMobile = true;\n  }\n\n  useEffect(() => {\n    let storage = retrieveLocalStorage(); // Randomize note & scale if none are in local storage\n\n    if (!storage.noteIndex) {\n      setNoteIndex(Math.floor(Math.random() * 12));\n    } else {\n      setNoteIndex(storage.noteIndex);\n    }\n\n    if (!storage.scaleIndex) {\n      setScaleIndex(Math.floor(Math.random() * scales.length));\n    } else {\n      setScaleIndex(storage.scaleIndex);\n    } // Check if there is a saved # of frets & strings in local storage\n\n\n    if (storage.numberOfFrets) {\n      setFretCount(storage.numberOfFrets);\n    }\n\n    if (storage.numberOfStrings) {\n      setStringCount(storage.numberOfStrings);\n    } // eslint-disable-next-line\n\n  }, []);\n\n  if (isMobile) {\n    return /*#__PURE__*/React.createElement(MobilePage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-selector-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"randomize-button\",\n    onClick: randomize,\n    title: \"randomize scale and root note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-dice\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"reset-button\",\n    onClick: resetToDefaults,\n    title: \"reset to default 6 string, 12 fret view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-redo-alt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, renderNoteButtons(alteration)), /*#__PURE__*/React.createElement(ScaleTray, {\n    options: scales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, infoModalOpen ? /*#__PURE__*/React.createElement(InfoPopup, {\n    closePopup: toggleInfoModal.bind(this),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }) : null, renderToggleButtons(), degrees ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"degree-notation-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: !sargamNotation ? \"on\" : \"sargams-on\",\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, \"numbered degrees\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: sargamNotation ? \"on\" : \"sargams-on\",\n    onClick: toggleIndianNotation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, \"indian sargams\")) : null), /*#__PURE__*/React.createElement(Fretboard, {\n    currentScale: currentScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"app-store-link\",\n    rel: \"noopener noreferrer\",\n    href: \"https://apps.apple.com/us/app/guitar-scale-finder/id1487884068\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, \"Download guitar scale finder for iOS (free, no ads)\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"email-link\",\n    rel: \"noopener noreferrer\",\n    href: \"mailto: guitarscalefinder@gmail.com\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, \"Request a feature or report a bug\"));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    sargamNotation: state.sargamNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    numberOfFrets: state.numberOfFrets,\n    numberOfStrings: state.numberOfStrings\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    }),\n    setFretCount: value => dispatch({\n      type: \"SET_FRET_COUNT\",\n      payload: value\n    }),\n    setStringCount: value => dispatch({\n      type: \"SET_STRING_COUNT\",\n      payload: value\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/personal_projects/scalefinder-v3/src/App.js"],"names":["React","useEffect","connect","Fretboard","ScaleTray","InfoPopup","MobilePage","scales","getAlteration","createScale","retrieveLocalStorage","iSymbol","App","props","selectedNoteIndex","selectedScaleIndex","highlightRoots","sargamNotation","sharps","degrees","infoModalOpen","showUnusedNotes","setNoteIndex","setScaleIndex","setFretCount","setStringCount","toggle","toggleSharps","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","randomize","Math","floor","random","length","resetToDefaults","renderNoteButtons","notation","map","note","idx","renderToggleButtons","btn","includes","currentScale","pattern","alteration","isMobile","test","navigator","userAgent","storage","noteIndex","scaleIndex","numberOfFrets","numberOfStrings","bind","mapStateToProps","state","mapDispatchToProps","dispatch","name","type","payload","index","value"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleTray from \"./components/ScaleTray\";\nimport InfoPopup from \"./components/InfoPopup\";\nimport MobilePage from \"./components/MobilePage\";\nimport scales from \"./constants/scales\";\nimport { getAlteration, createScale, retrieveLocalStorage } from \"./constants/utils\";\n\nconst iSymbol = <span type=\"text\"> &#8505;</span>;\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    highlightRoots,\n    sargamNotation,\n    sharps,\n    degrees,\n    infoModalOpen,\n    showUnusedNotes,\n    setNoteIndex,\n    setScaleIndex,\n    setFretCount,\n    setStringCount,\n    toggle,\n  } = props;\n\n  const toggleSharps = () => {\n    toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    toggle(\"highlightRoots\");\n\n  };\n\n  const toggleShowUnusedNotes = () => {\n    toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    toggle(\"sargamNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [\n    {\n      toggle: toggleSharps,\n      btnText: sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n    },\n    {\n      toggle: toggleShowUnusedNotes,\n      btnText: showUnusedNotes ? \"Label scale only\" : \"Label all frets\",\n      round: false,\n    },\n    {\n      toggle: toggleShowDegrees,\n      btnText: degrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n    },\n    {\n      toggle: toggleInfoModal,\n      btnText: iSymbol,\n      round: true,\n    },\n  ];\n\n  const randomize = () => {\n    setNoteIndex(Math.floor(Math.random() * 12));\n    setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const resetToDefaults = () => {\n    setFretCount(12);\n    setStringCount(6);\n  }\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"note-button\"\n          id={idx === selectedNoteIndex ? \"selected\" : \"unselected\"}\n          onClick={() => {\n            setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return (\n        <button\n          key={idx}\n          className={\n            btn.round ? \"round-button-gray\" : \"rectangular-button-gray\"\n          }\n          id={\n            btn.btnText === \"Highlight roots\" && highlightRoots\n              ? \"selected-green\"\n              : !btn.round && btn.btnText.includes(\"degrees\") && degrees\n                ? \"selected-blue\"\n                : null\n          }\n          onClick={btn.toggle}\n        >\n          {btn.btnText}\n        </button>\n      );\n    });\n  };\n\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n\n  const alteration = getAlteration(sharps);\n\n  let isMobile = false;\n\n  if (/Mobi/.test(navigator.userAgent)) {\n    isMobile = true;\n  }\n\n  useEffect(() => {\n    let storage = retrieveLocalStorage();\n\n    // Randomize note & scale if none are in local storage\n    if (!storage.noteIndex) {\n      setNoteIndex(Math.floor(Math.random() * 12));\n    } else {\n      setNoteIndex(storage.noteIndex)\n    }\n\n    if (!storage.scaleIndex) {\n      setScaleIndex(Math.floor(Math.random() * scales.length));\n    } else {\n      setScaleIndex(storage.scaleIndex)\n    }\n\n    // Check if there is a saved # of frets & strings in local storage\n    if (storage.numberOfFrets) {\n      setFretCount(storage.numberOfFrets)\n    }\n    if (storage.numberOfStrings) {\n      setStringCount(storage.numberOfStrings)\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  if (isMobile) {\n    return <MobilePage></MobilePage>\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-selector-container\">\n        <button id=\"randomize-button\" onClick={randomize} title=\"randomize scale and root note\">\n          <i className=\"fas fa-dice\"/>\n        </button>\n        <button id=\"reset-button\" onClick={resetToDefaults} title=\"reset to default 6 string, 12 fret view\">\n          <i className=\"fas fa-redo-alt\"/>\n        </button>\n        <div className=\"note-button-container\">\n          {renderNoteButtons(alteration)}\n        </div>\n        <ScaleTray options={scales} />\n      </div>\n      <div className=\"toggle-button-container\">\n        {infoModalOpen ? (\n          <InfoPopup closePopup={toggleInfoModal.bind(this)} />\n        ) : null}\n        {renderToggleButtons()}\n        {degrees ? (\n          <div className=\"degree-notation-options\">\n            <button\n              className={!sargamNotation ? \"on\" : \"sargams-on\"}\n              onClick={toggleIndianNotation}\n            >\n              numbered degrees\n            </button>\n            <button\n              className={sargamNotation ? \"on\" : \"sargams-on\"}\n              onClick={toggleIndianNotation}\n            >\n              indian sargams\n            </button>\n          </div>\n        ) : null}\n      </div>\n      <Fretboard currentScale={currentScale}></Fretboard>\n      <a className=\"app-store-link\" rel=\"noopener noreferrer\" href=\"https://apps.apple.com/us/app/guitar-scale-finder/id1487884068\" target=\"_blank\">Download guitar scale finder for iOS (free, no ads)</a>\n      <a className=\"email-link\" rel=\"noopener noreferrer\" href=\"mailto: guitarscalefinder@gmail.com\" target=\"_blank\">Request a feature or report a bug</a>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    sargamNotation: state.sargamNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n    numberOfFrets: state.numberOfFrets,\n    numberOfStrings: state.numberOfStrings,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n    setFretCount: (value) =>\n      dispatch({ type: \"SET_FRET_COUNT\", payload: value }),\n    setStringCount: (value) =>\n      dispatch({ type: \"SET_STRING_COUNT\", payload: value }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}