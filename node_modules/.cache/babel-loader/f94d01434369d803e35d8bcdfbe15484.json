{"ast":null,"code":"var _jsxFileName = \"/Users/jake/Desktop/scalefinder-v3/src/App.js\";\nimport React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleDropdown from \"./components/ScaleDropdown\";\nimport NumStringsDropdown from \"./components/NumStringsDropdown\";\nimport scales from \"./constants/scales\";\nimport { convertIndexToString, getAlteration, createScale } from \"./constants/utils\";\nimport stringOptions from \"./constants/stringOptions\";\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    swaraNotation,\n    sharps,\n    degrees\n  } = props;\n\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"swaraNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [{\n    toggle: toggleSharps,\n    btnText: props.sharps ? \"♭\" : \"♯\",\n    round: true\n  }, {\n    toggle: toggleHighlightRoots,\n    btnText: \"Highlight roots\",\n    round: false,\n    color: \"green\"\n  }, {\n    toggle: toggleShowUnusedNotes,\n    btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n    round: false\n  }, {\n    toggle: toggleShowDegrees,\n    btnText: props.degrees ? \"Hide degrees\" : \"Show degrees\",\n    round: false,\n    color: \"blue\"\n  }, {\n    toggle: toggleInfoModal,\n    btnText: \"info\",\n    round: true\n  }];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = notation => {\n    return notation.map((note, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: [note, idx],\n        className: \"note-button\",\n        id: idx === selectedNoteIndex ? \"selected\" : \"unselected\",\n        onClick: () => {\n          props.setNoteIndex(idx);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, note);\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: idx,\n        className: btn.round ? \"round-button-gray\" : \"rectangular-button-gray\",\n        onClick: btn.toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, btn.btnText);\n    });\n  };\n\n  const renderDegreeOptions = degrees => {\n    return degrees ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"rectangular-button-gray\",\n      onClick: toggleIndianNotation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, swaraNotation ? \"Numbered degrees\" : \"Indian swara notation\") : null;\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(selectedNoteIndex, scales[selectedScaleIndex].pattern);\n  const alteration = getAlteration(sharps);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-selector-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, renderNoteButtons(alteration)), /*#__PURE__*/React.createElement(ScaleDropdown, {\n    options: scales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"toggle-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, renderToggleButtons(), renderDegreeOptions(degrees)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fretboard, {\n    currentScale: currentScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  })));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: name => dispatch({\n      type: \"TOGGLE\",\n      payload: name\n    }),\n    setNoteIndex: index => dispatch({\n      type: \"SET_NOTE_INDEX\",\n      payload: index\n    }),\n    setScaleIndex: index => dispatch({\n      type: \"SET_SCALE_INDEX\",\n      payload: index\n    })\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/jake/Desktop/scalefinder-v3/src/App.js"],"names":["React","connect","Fretboard","ScaleDropdown","NumStringsDropdown","scales","convertIndexToString","getAlteration","createScale","stringOptions","App","props","selectedNoteIndex","selectedScaleIndex","swaraNotation","sharps","degrees","toggleSharps","toggle","toggleHighlightRoots","toggleShowUnusedNotes","toggleShowDegrees","toggleIndianNotation","toggleInfoModal","toggleOptions","btnText","round","color","showUnusedNotes","randomize","setNoteIndex","Math","floor","random","setScaleIndex","length","renderNoteButtons","notation","map","note","idx","renderToggleButtons","btn","renderDegreeOptions","rootDisplay","scaleDisplay","name","currentScale","pattern","alteration","mapStateToProps","state","highlightRoots","infoModalOpen","mapDispatchToProps","dispatch","type","payload","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport Fretboard from \"./components/Fretboard\";\nimport ScaleDropdown from \"./components/ScaleDropdown\";\nimport NumStringsDropdown from \"./components/NumStringsDropdown\";\nimport scales from \"./constants/scales\";\nimport {\n  convertIndexToString,\n  getAlteration,\n  createScale,\n} from \"./constants/utils\";\nimport stringOptions from \"./constants/stringOptions\";\n\nfunction App(props) {\n  const {\n    selectedNoteIndex,\n    selectedScaleIndex,\n    swaraNotation,\n    sharps,\n    degrees,\n  } = props;\n  const toggleSharps = () => {\n    props.toggle(\"sharps\");\n  };\n\n  const toggleHighlightRoots = () => {\n    props.toggle(\"highlightRoots\");\n  };\n\n  const toggleShowUnusedNotes = () => {\n    props.toggle(\"showUnusedNotes\");\n  };\n\n  const toggleShowDegrees = () => {\n    props.toggle(\"degrees\");\n  };\n\n  const toggleIndianNotation = () => {\n    props.toggle(\"swaraNotation\");\n  };\n\n  const toggleInfoModal = () => {\n    props.toggle(\"infoModalOpen\");\n  };\n\n  const toggleOptions = [\n    {\n      toggle: toggleSharps,\n      btnText: props.sharps ? \"♭\" : \"♯\",\n      round: true,\n    },\n    {\n      toggle: toggleHighlightRoots,\n      btnText: \"Highlight roots\",\n      round: false,\n      color: \"green\",\n    },\n    {\n      toggle: toggleShowUnusedNotes,\n      btnText: props.showUnusedNotes ? \"Label scale only\" : \"Label all notes\",\n      round: false,\n    },\n    {\n      toggle: toggleShowDegrees,\n      btnText: props.degrees ? \"Hide degrees\" : \"Show degrees\",\n      round: false,\n      color: \"blue\",\n    },\n    {\n      toggle: toggleInfoModal,\n      btnText: \"info\",\n      round: true,\n    },\n  ];\n\n  const randomize = () => {\n    props.setNoteIndex(Math.floor(Math.random() * 12));\n    props.setScaleIndex(Math.floor(Math.random() * scales.length));\n  };\n\n  const renderNoteButtons = (notation) => {\n    return notation.map((note, idx) => {\n      return (\n        <button\n          key={[note, idx]}\n          className=\"note-button\"\n          id={idx === selectedNoteIndex ? \"selected\" : \"unselected\"}\n          onClick={() => {\n            props.setNoteIndex(idx);\n          }}\n        >\n          {note}\n        </button>\n      );\n    });\n  };\n\n  const renderToggleButtons = () => {\n    return toggleOptions.map((btn, idx) => {\n      return (\n        <button\n          key={idx}\n          className={\n            btn.round ? \"round-button-gray\" : \"rectangular-button-gray\"\n          }\n          onClick={btn.toggle}\n        >\n          {btn.btnText}\n        </button>\n      );\n    });\n  };\n\n  const renderDegreeOptions = (degrees) => {\n    return degrees ? (\n      <button\n        className={\"rectangular-button-gray\"}\n        onClick={toggleIndianNotation}\n      >\n        {swaraNotation ? \"Numbered degrees\" : \"Indian swara notation\"}\n      </button>\n    ) : null;\n  };\n\n  const rootDisplay = convertIndexToString(selectedNoteIndex, sharps);\n  const scaleDisplay = scales[selectedScaleIndex].name;\n  const currentScale = createScale(\n    selectedNoteIndex,\n    scales[selectedScaleIndex].pattern\n  );\n  const alteration = getAlteration(sharps);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-selector-container\">\n        <div className=\"note-button-container\">\n          {renderNoteButtons(alteration)}\n        </div>\n        <ScaleDropdown options={scales} />\n      </div>\n      <div className=\"toggle-button-container\">\n        {renderToggleButtons()}\n        {renderDegreeOptions(degrees)}\n      </div>\n      <div className=\"main-display\">\n        {/* <div className=\"current-selection-string\">\n          <h4>{rootDisplay}</h4>\n          <h4>{scaleDisplay}</h4>\n        </div> */}\n        <Fretboard currentScale={currentScale}></Fretboard>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sharps: state.sharps,\n    highlightRoots: state.highlightRoots,\n    showUnusedNotes: state.showUnusedNotes,\n    degrees: state.degrees,\n    swaraNotation: state.swaraNotation,\n    infoModalOpen: state.infoModalOpen,\n    selectedNoteIndex: state.selectedNoteIndex,\n    selectedScaleIndex: state.selectedScaleIndex,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggle: (name) => dispatch({ type: \"TOGGLE\", payload: name }),\n    setNoteIndex: (index) =>\n      dispatch({ type: \"SET_NOTE_INDEX\", payload: index }),\n    setScaleIndex: (index) =>\n      dispatch({ type: \"SET_SCALE_INDEX\", payload: index }),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}